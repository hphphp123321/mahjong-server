// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0--rc2
// source: app/api/v1/robot/robot.proto

package api_mahjong_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcRobotClient is the client API for GrpcRobot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcRobotClient interface {
	ChooseAction(ctx context.Context, in *ChooseActionRequest, opts ...grpc.CallOption) (*ChooseActionReply, error)
	ChooseActionByBoardState(ctx context.Context, in *BoardState, opts ...grpc.CallOption) (*ChooseActionReply, error)
}

type grpcRobotClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcRobotClient(cc grpc.ClientConnInterface) GrpcRobotClient {
	return &grpcRobotClient{cc}
}

func (c *grpcRobotClient) ChooseAction(ctx context.Context, in *ChooseActionRequest, opts ...grpc.CallOption) (*ChooseActionReply, error) {
	out := new(ChooseActionReply)
	err := c.cc.Invoke(ctx, "/grpcRobot.GrpcRobot/ChooseAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcRobotClient) ChooseActionByBoardState(ctx context.Context, in *BoardState, opts ...grpc.CallOption) (*ChooseActionReply, error) {
	out := new(ChooseActionReply)
	err := c.cc.Invoke(ctx, "/grpcRobot.GrpcRobot/ChooseActionByBoardState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcRobotServer is the server API for GrpcRobot service.
// All implementations must embed UnimplementedGrpcRobotServer
// for forward compatibility
type GrpcRobotServer interface {
	ChooseAction(context.Context, *ChooseActionRequest) (*ChooseActionReply, error)
	ChooseActionByBoardState(context.Context, *BoardState) (*ChooseActionReply, error)
	mustEmbedUnimplementedGrpcRobotServer()
}

// UnimplementedGrpcRobotServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcRobotServer struct {
}

func (UnimplementedGrpcRobotServer) ChooseAction(context.Context, *ChooseActionRequest) (*ChooseActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseAction not implemented")
}
func (UnimplementedGrpcRobotServer) ChooseActionByBoardState(context.Context, *BoardState) (*ChooseActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseActionByBoardState not implemented")
}
func (UnimplementedGrpcRobotServer) mustEmbedUnimplementedGrpcRobotServer() {}

// UnsafeGrpcRobotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcRobotServer will
// result in compilation errors.
type UnsafeGrpcRobotServer interface {
	mustEmbedUnimplementedGrpcRobotServer()
}

func RegisterGrpcRobotServer(s grpc.ServiceRegistrar, srv GrpcRobotServer) {
	s.RegisterService(&GrpcRobot_ServiceDesc, srv)
}

func _GrpcRobot_ChooseAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChooseActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcRobotServer).ChooseAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcRobot.GrpcRobot/ChooseAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcRobotServer).ChooseAction(ctx, req.(*ChooseActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcRobot_ChooseActionByBoardState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcRobotServer).ChooseActionByBoardState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcRobot.GrpcRobot/ChooseActionByBoardState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcRobotServer).ChooseActionByBoardState(ctx, req.(*BoardState))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcRobot_ServiceDesc is the grpc.ServiceDesc for GrpcRobot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcRobot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcRobot.GrpcRobot",
	HandlerType: (*GrpcRobotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChooseAction",
			Handler:    _GrpcRobot_ChooseAction_Handler,
		},
		{
			MethodName: "ChooseActionByBoardState",
			Handler:    _GrpcRobot_ChooseActionByBoardState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/api/v1/robot/robot.proto",
}
