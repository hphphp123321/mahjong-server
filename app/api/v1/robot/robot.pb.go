// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: app/api/v1/robot/robot.proto

package api_robot_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Limit int32

const (
	Limit_LimitNone      Limit = 0
	Limit_LimitMangan    Limit = 1
	Limit_LimitHaneman   Limit = 2
	Limit_LimitBaiman    Limit = 3
	Limit_LimitSanbaiman Limit = 4
	Limit_LimitYakuman   Limit = 5
)

// Enum value maps for Limit.
var (
	Limit_name = map[int32]string{
		0: "LimitNone",
		1: "LimitMangan",
		2: "LimitHaneman",
		3: "LimitBaiman",
		4: "LimitSanbaiman",
		5: "LimitYakuman",
	}
	Limit_value = map[string]int32{
		"LimitNone":      0,
		"LimitMangan":    1,
		"LimitHaneman":   2,
		"LimitBaiman":    3,
		"LimitSanbaiman": 4,
		"LimitYakuman":   5,
	}
)

func (x Limit) Enum() *Limit {
	p := new(Limit)
	*p = x
	return p
}

func (x Limit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Limit) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[0].Descriptor()
}

func (Limit) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[0]
}

func (x Limit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Limit.Descriptor instead.
func (Limit) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{0}
}

type RyuuKyoKuReason int32

const (
	RyuuKyoKuReason_RyuuKyokuNormal         RyuuKyoKuReason = 0
	RyuuKyoKuReason_RyuuKyokuKyuuShuKyuuHai RyuuKyoKuReason = 1
	RyuuKyoKuReason_RyuuKyokuSuuChaRiichi   RyuuKyoKuReason = 2
	RyuuKyoKuReason_RyuuKyokuSuuKaiKan      RyuuKyoKuReason = 3
	RyuuKyoKuReason_RyuuKyokuSuufonRenda    RyuuKyoKuReason = 4
	RyuuKyoKuReason_RyuuKyokuSanChaHou      RyuuKyoKuReason = 5
)

// Enum value maps for RyuuKyoKuReason.
var (
	RyuuKyoKuReason_name = map[int32]string{
		0: "RyuuKyokuNormal",
		1: "RyuuKyokuKyuuShuKyuuHai",
		2: "RyuuKyokuSuuChaRiichi",
		3: "RyuuKyokuSuuKaiKan",
		4: "RyuuKyokuSuufonRenda",
		5: "RyuuKyokuSanChaHou",
	}
	RyuuKyoKuReason_value = map[string]int32{
		"RyuuKyokuNormal":         0,
		"RyuuKyokuKyuuShuKyuuHai": 1,
		"RyuuKyokuSuuChaRiichi":   2,
		"RyuuKyokuSuuKaiKan":      3,
		"RyuuKyokuSuufonRenda":    4,
		"RyuuKyokuSanChaHou":      5,
	}
)

func (x RyuuKyoKuReason) Enum() *RyuuKyoKuReason {
	p := new(RyuuKyoKuReason)
	*p = x
	return p
}

func (x RyuuKyoKuReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RyuuKyoKuReason) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[1].Descriptor()
}

func (RyuuKyoKuReason) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[1]
}

func (x RyuuKyoKuReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RyuuKyoKuReason.Descriptor instead.
func (RyuuKyoKuReason) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{1}
}

type FuritenReason int32

const (
	FuritenReason_FuritenNone    FuritenReason = 0
	FuritenReason_FuritenJun     FuritenReason = 1
	FuritenReason_FuritenDiscard FuritenReason = 2
	FuritenReason_FuritenRiichi  FuritenReason = 3
)

// Enum value maps for FuritenReason.
var (
	FuritenReason_name = map[int32]string{
		0: "FuritenNone",
		1: "FuritenJun",
		2: "FuritenDiscard",
		3: "FuritenRiichi",
	}
	FuritenReason_value = map[string]int32{
		"FuritenNone":    0,
		"FuritenJun":     1,
		"FuritenDiscard": 2,
		"FuritenRiichi":  3,
	}
)

func (x FuritenReason) Enum() *FuritenReason {
	p := new(FuritenReason)
	*p = x
	return p
}

func (x FuritenReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FuritenReason) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[2].Descriptor()
}

func (FuritenReason) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[2]
}

func (x FuritenReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FuritenReason.Descriptor instead.
func (FuritenReason) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{2}
}

type Wind int32

const (
	Wind_WindDummy Wind = 0
	Wind_East      Wind = 1 // 东
	Wind_South     Wind = 2 // 南
	Wind_West      Wind = 3 // 西
	Wind_North     Wind = 4 // 北
)

// Enum value maps for Wind.
var (
	Wind_name = map[int32]string{
		0: "WindDummy",
		1: "East",
		2: "South",
		3: "West",
		4: "North",
	}
	Wind_value = map[string]int32{
		"WindDummy": 0,
		"East":      1,
		"South":     2,
		"West":      3,
		"North":     4,
	}
)

func (x Wind) Enum() *Wind {
	p := new(Wind)
	*p = x
	return p
}

func (x Wind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Wind) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[3].Descriptor()
}

func (Wind) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[3]
}

func (x Wind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Wind.Descriptor instead.
func (Wind) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{3}
}

type WindRound int32

const (
	WindRound_WindRoundDummy  WindRound = 0
	WindRound_WindRoundEast1  WindRound = 1
	WindRound_WindRoundEast2  WindRound = 2
	WindRound_WindRoundEast3  WindRound = 3
	WindRound_WindRoundEast4  WindRound = 4
	WindRound_WindRoundSouth1 WindRound = 5
	WindRound_WindRoundSouth2 WindRound = 6
	WindRound_WindRoundSouth3 WindRound = 7
	WindRound_WindRoundSouth4 WindRound = 8
	WindRound_WindRoundWest1  WindRound = 9
	WindRound_WindRoundWest2  WindRound = 10
	WindRound_WindRoundWest3  WindRound = 11
	WindRound_WindRoundWest4  WindRound = 12
	WindRound_WindRoundNorth1 WindRound = 13
	WindRound_WindRoundNorth2 WindRound = 14
	WindRound_WindRoundNorth3 WindRound = 15
	WindRound_WindRoundNorth4 WindRound = 16
)

// Enum value maps for WindRound.
var (
	WindRound_name = map[int32]string{
		0:  "WindRoundDummy",
		1:  "WindRoundEast1",
		2:  "WindRoundEast2",
		3:  "WindRoundEast3",
		4:  "WindRoundEast4",
		5:  "WindRoundSouth1",
		6:  "WindRoundSouth2",
		7:  "WindRoundSouth3",
		8:  "WindRoundSouth4",
		9:  "WindRoundWest1",
		10: "WindRoundWest2",
		11: "WindRoundWest3",
		12: "WindRoundWest4",
		13: "WindRoundNorth1",
		14: "WindRoundNorth2",
		15: "WindRoundNorth3",
		16: "WindRoundNorth4",
	}
	WindRound_value = map[string]int32{
		"WindRoundDummy":  0,
		"WindRoundEast1":  1,
		"WindRoundEast2":  2,
		"WindRoundEast3":  3,
		"WindRoundEast4":  4,
		"WindRoundSouth1": 5,
		"WindRoundSouth2": 6,
		"WindRoundSouth3": 7,
		"WindRoundSouth4": 8,
		"WindRoundWest1":  9,
		"WindRoundWest2":  10,
		"WindRoundWest3":  11,
		"WindRoundWest4":  12,
		"WindRoundNorth1": 13,
		"WindRoundNorth2": 14,
		"WindRoundNorth3": 15,
		"WindRoundNorth4": 16,
	}
)

func (x WindRound) Enum() *WindRound {
	p := new(WindRound)
	*p = x
	return p
}

func (x WindRound) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindRound) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[4].Descriptor()
}

func (WindRound) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[4]
}

func (x WindRound) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindRound.Descriptor instead.
func (WindRound) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{4}
}

type CallType int32

const (
	CallType_Skip         CallType = 0
	CallType_Discard      CallType = 1
	CallType_Chi          CallType = 2
	CallType_Pon          CallType = 3
	CallType_DaiMinKan    CallType = 4
	CallType_ShouMinKan   CallType = 5
	CallType_AnKan        CallType = 6
	CallType_Riichi       CallType = 7
	CallType_Ron          CallType = 8
	CallType_Tsumo        CallType = 9
	CallType_KyuShuKyuHai CallType = 10
	CallType_ChanKan      CallType = 11
	CallType_Next         CallType = 12
)

// Enum value maps for CallType.
var (
	CallType_name = map[int32]string{
		0:  "Skip",
		1:  "Discard",
		2:  "Chi",
		3:  "Pon",
		4:  "DaiMinKan",
		5:  "ShouMinKan",
		6:  "AnKan",
		7:  "Riichi",
		8:  "Ron",
		9:  "Tsumo",
		10: "KyuShuKyuHai",
		11: "ChanKan",
		12: "Next",
	}
	CallType_value = map[string]int32{
		"Skip":         0,
		"Discard":      1,
		"Chi":          2,
		"Pon":          3,
		"DaiMinKan":    4,
		"ShouMinKan":   5,
		"AnKan":        6,
		"Riichi":       7,
		"Ron":          8,
		"Tsumo":        9,
		"KyuShuKyuHai": 10,
		"ChanKan":      11,
		"Next":         12,
	}
)

func (x CallType) Enum() *CallType {
	p := new(CallType)
	*p = x
	return p
}

func (x CallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[5].Descriptor()
}

func (CallType) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[5]
}

func (x CallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallType.Descriptor instead.
func (CallType) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{5}
}

type Fu int32

const (
	Fu_FuNone          Fu = 0
	Fu_FuBase          Fu = 1
	Fu_FuBaseClosedRon Fu = 2
	Fu_FuBase7         Fu = 3
	Fu_FuSet           Fu = 4
	Fu_FuTsumo         Fu = 5
	Fu_FuMeld          Fu = 6
	Fu_FuNoOpenFu      Fu = 7
	Fu_FuBadWait       Fu = 8
	Fu_FuPair          Fu = 9
)

// Enum value maps for Fu.
var (
	Fu_name = map[int32]string{
		0: "FuNone",
		1: "FuBase",
		2: "FuBaseClosedRon",
		3: "FuBase7",
		4: "FuSet",
		5: "FuTsumo",
		6: "FuMeld",
		7: "FuNoOpenFu",
		8: "FuBadWait",
		9: "FuPair",
	}
	Fu_value = map[string]int32{
		"FuNone":          0,
		"FuBase":          1,
		"FuBaseClosedRon": 2,
		"FuBase7":         3,
		"FuSet":           4,
		"FuTsumo":         5,
		"FuMeld":          6,
		"FuNoOpenFu":      7,
		"FuBadWait":       8,
		"FuPair":          9,
	}
)

func (x Fu) Enum() *Fu {
	p := new(Fu)
	*p = x
	return p
}

func (x Fu) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fu) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[6].Descriptor()
}

func (Fu) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[6]
}

func (x Fu) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fu.Descriptor instead.
func (Fu) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{6}
}

type Yaku int32

const (
	Yaku_YakuNone           Yaku = 0
	Yaku_YakuRiichi         Yaku = 1
	Yaku_YakuDaburi         Yaku = 2
	Yaku_YakuIppatsu        Yaku = 3
	Yaku_YakuTsumo          Yaku = 4
	Yaku_YakuTanyao         Yaku = 5
	Yaku_YakuChanta         Yaku = 6
	Yaku_YakuJunchan        Yaku = 7
	Yaku_YakuHonrouto       Yaku = 8
	Yaku_YakuYakuhai        Yaku = 9
	Yaku_YakuHaku           Yaku = 10
	Yaku_YakuHatsu          Yaku = 11
	Yaku_YakuChun           Yaku = 12
	Yaku_YakuWindRound      Yaku = 13
	Yaku_YakuWindSelf       Yaku = 14
	Yaku_YakuTon            Yaku = 15
	Yaku_YakuNan            Yaku = 16
	Yaku_YakuSja            Yaku = 17
	Yaku_YakuPei            Yaku = 18
	Yaku_YakuTonSelf        Yaku = 19
	Yaku_YakuNanSelf        Yaku = 20
	Yaku_YakuSjaSelf        Yaku = 21
	Yaku_YakuPeiSelf        Yaku = 22
	Yaku_YakuTonRound       Yaku = 23
	Yaku_YakuNanRound       Yaku = 24
	Yaku_YakuSjaRound       Yaku = 25
	Yaku_YakuPeiRound       Yaku = 26
	Yaku_YakuChiitoi        Yaku = 27
	Yaku_YakuToitoi         Yaku = 28
	Yaku_YakuSanankou       Yaku = 29
	Yaku_YakuSankantsu      Yaku = 30
	Yaku_YakuSanshoku       Yaku = 31
	Yaku_YakuShousangen     Yaku = 32
	Yaku_YakuPinfu          Yaku = 33
	Yaku_YakuIppeiko        Yaku = 34
	Yaku_YakuRyanpeikou     Yaku = 35
	Yaku_YakuItsuu          Yaku = 36
	Yaku_YakuSanshokuDoukou Yaku = 37
	Yaku_YakuHonitsu        Yaku = 38
	Yaku_YakuChinitsu       Yaku = 39
	Yaku_YakuDora           Yaku = 40
	Yaku_YakuUraDora        Yaku = 41
	Yaku_YakuAkaDora        Yaku = 42
	Yaku_YakuRenhou         Yaku = 43
	Yaku_YakuHaitei         Yaku = 44
	Yaku_YakuHoutei         Yaku = 45
	Yaku_YakuRinshan        Yaku = 46
	Yaku_YakuChankan        Yaku = 47
)

// Enum value maps for Yaku.
var (
	Yaku_name = map[int32]string{
		0:  "YakuNone",
		1:  "YakuRiichi",
		2:  "YakuDaburi",
		3:  "YakuIppatsu",
		4:  "YakuTsumo",
		5:  "YakuTanyao",
		6:  "YakuChanta",
		7:  "YakuJunchan",
		8:  "YakuHonrouto",
		9:  "YakuYakuhai",
		10: "YakuHaku",
		11: "YakuHatsu",
		12: "YakuChun",
		13: "YakuWindRound",
		14: "YakuWindSelf",
		15: "YakuTon",
		16: "YakuNan",
		17: "YakuSja",
		18: "YakuPei",
		19: "YakuTonSelf",
		20: "YakuNanSelf",
		21: "YakuSjaSelf",
		22: "YakuPeiSelf",
		23: "YakuTonRound",
		24: "YakuNanRound",
		25: "YakuSjaRound",
		26: "YakuPeiRound",
		27: "YakuChiitoi",
		28: "YakuToitoi",
		29: "YakuSanankou",
		30: "YakuSankantsu",
		31: "YakuSanshoku",
		32: "YakuShousangen",
		33: "YakuPinfu",
		34: "YakuIppeiko",
		35: "YakuRyanpeikou",
		36: "YakuItsuu",
		37: "YakuSanshokuDoukou",
		38: "YakuHonitsu",
		39: "YakuChinitsu",
		40: "YakuDora",
		41: "YakuUraDora",
		42: "YakuAkaDora",
		43: "YakuRenhou",
		44: "YakuHaitei",
		45: "YakuHoutei",
		46: "YakuRinshan",
		47: "YakuChankan",
	}
	Yaku_value = map[string]int32{
		"YakuNone":           0,
		"YakuRiichi":         1,
		"YakuDaburi":         2,
		"YakuIppatsu":        3,
		"YakuTsumo":          4,
		"YakuTanyao":         5,
		"YakuChanta":         6,
		"YakuJunchan":        7,
		"YakuHonrouto":       8,
		"YakuYakuhai":        9,
		"YakuHaku":           10,
		"YakuHatsu":          11,
		"YakuChun":           12,
		"YakuWindRound":      13,
		"YakuWindSelf":       14,
		"YakuTon":            15,
		"YakuNan":            16,
		"YakuSja":            17,
		"YakuPei":            18,
		"YakuTonSelf":        19,
		"YakuNanSelf":        20,
		"YakuSjaSelf":        21,
		"YakuPeiSelf":        22,
		"YakuTonRound":       23,
		"YakuNanRound":       24,
		"YakuSjaRound":       25,
		"YakuPeiRound":       26,
		"YakuChiitoi":        27,
		"YakuToitoi":         28,
		"YakuSanankou":       29,
		"YakuSankantsu":      30,
		"YakuSanshoku":       31,
		"YakuShousangen":     32,
		"YakuPinfu":          33,
		"YakuIppeiko":        34,
		"YakuRyanpeikou":     35,
		"YakuItsuu":          36,
		"YakuSanshokuDoukou": 37,
		"YakuHonitsu":        38,
		"YakuChinitsu":       39,
		"YakuDora":           40,
		"YakuUraDora":        41,
		"YakuAkaDora":        42,
		"YakuRenhou":         43,
		"YakuHaitei":         44,
		"YakuHoutei":         45,
		"YakuRinshan":        46,
		"YakuChankan":        47,
	}
)

func (x Yaku) Enum() *Yaku {
	p := new(Yaku)
	*p = x
	return p
}

func (x Yaku) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Yaku) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[7].Descriptor()
}

func (Yaku) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[7]
}

func (x Yaku) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Yaku.Descriptor instead.
func (Yaku) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{7}
}

type Yakuman int32

const (
	Yakuman_YakumanNone          Yakuman = 0
	Yakuman_YakumanKokushi       Yakuman = 1
	Yakuman_YakumanKokushi13     Yakuman = 2
	Yakuman_YakumanSuukantsu     Yakuman = 3
	Yakuman_YakumanSuuankou      Yakuman = 4
	Yakuman_YakumanSuuankouTanki Yakuman = 5
	Yakuman_YakumanDaisangen     Yakuman = 6
	Yakuman_YakumanShousuushi    Yakuman = 7
	Yakuman_YakumanDaisuushi     Yakuman = 8
	Yakuman_YakumanRyuuiisou     Yakuman = 9
	Yakuman_YakumanTsuiisou      Yakuman = 10
	Yakuman_YakumanChinrouto     Yakuman = 11
	Yakuman_YakumanChuurenpooto  Yakuman = 12
	Yakuman_YakumanChuurenpooto9 Yakuman = 13
	Yakuman_YakumanTenhou        Yakuman = 14
	Yakuman_YakumanChihou        Yakuman = 15
	Yakuman_YakumanRenhou        Yakuman = 16
)

// Enum value maps for Yakuman.
var (
	Yakuman_name = map[int32]string{
		0:  "YakumanNone",
		1:  "YakumanKokushi",
		2:  "YakumanKokushi13",
		3:  "YakumanSuukantsu",
		4:  "YakumanSuuankou",
		5:  "YakumanSuuankouTanki",
		6:  "YakumanDaisangen",
		7:  "YakumanShousuushi",
		8:  "YakumanDaisuushi",
		9:  "YakumanRyuuiisou",
		10: "YakumanTsuiisou",
		11: "YakumanChinrouto",
		12: "YakumanChuurenpooto",
		13: "YakumanChuurenpooto9",
		14: "YakumanTenhou",
		15: "YakumanChihou",
		16: "YakumanRenhou",
	}
	Yakuman_value = map[string]int32{
		"YakumanNone":          0,
		"YakumanKokushi":       1,
		"YakumanKokushi13":     2,
		"YakumanSuukantsu":     3,
		"YakumanSuuankou":      4,
		"YakumanSuuankouTanki": 5,
		"YakumanDaisangen":     6,
		"YakumanShousuushi":    7,
		"YakumanDaisuushi":     8,
		"YakumanRyuuiisou":     9,
		"YakumanTsuiisou":      10,
		"YakumanChinrouto":     11,
		"YakumanChuurenpooto":  12,
		"YakumanChuurenpooto9": 13,
		"YakumanTenhou":        14,
		"YakumanChihou":        15,
		"YakumanRenhou":        16,
	}
)

func (x Yakuman) Enum() *Yakuman {
	p := new(Yakuman)
	*p = x
	return p
}

func (x Yakuman) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Yakuman) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[8].Descriptor()
}

func (Yakuman) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[8]
}

func (x Yakuman) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Yakuman.Descriptor instead.
func (Yakuman) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{8}
}

type Tile int32

const (
	Tile_TileDummy Tile = 0
	Tile_Man1T1    Tile = 1
	Tile_Man1T2    Tile = 2
	Tile_Man1T3    Tile = 3
	Tile_Man1T4    Tile = 4
	Tile_Man2T1    Tile = 5
	Tile_Man2T2    Tile = 6
	Tile_Man2T3    Tile = 7
	Tile_Man2T4    Tile = 8
	Tile_Man3T1    Tile = 9
	Tile_Man3T2    Tile = 10
	Tile_Man3T3    Tile = 11
	Tile_Man3T4    Tile = 12
	Tile_Man4T1    Tile = 13
	Tile_Man4T2    Tile = 14
	Tile_Man4T3    Tile = 15
	Tile_Man4T4    Tile = 16
	Tile_Man5T1    Tile = 17
	Tile_Man5T2    Tile = 18
	Tile_Man5T3    Tile = 19
	Tile_Man5T4    Tile = 20
	Tile_Man6T1    Tile = 21
	Tile_Man6T2    Tile = 22
	Tile_Man6T3    Tile = 23
	Tile_Man6T4    Tile = 24
	Tile_Man7T1    Tile = 25
	Tile_Man7T2    Tile = 26
	Tile_Man7T3    Tile = 27
	Tile_Man7T4    Tile = 28
	Tile_Man8T1    Tile = 29
	Tile_Man8T2    Tile = 30
	Tile_Man8T3    Tile = 31
	Tile_Man8T4    Tile = 32
	Tile_Man9T1    Tile = 33
	Tile_Man9T2    Tile = 34
	Tile_Man9T3    Tile = 35
	Tile_Man9T4    Tile = 36
	Tile_Pin1T1    Tile = 37
	Tile_Pin1T2    Tile = 38
	Tile_Pin1T3    Tile = 39
	Tile_Pin1T4    Tile = 40
	Tile_Pin2T1    Tile = 41
	Tile_Pin2T2    Tile = 42
	Tile_Pin2T3    Tile = 43
	Tile_Pin2T4    Tile = 44
	Tile_Pin3T1    Tile = 45
	Tile_Pin3T2    Tile = 46
	Tile_Pin3T3    Tile = 47
	Tile_Pin3T4    Tile = 48
	Tile_Pin4T1    Tile = 49
	Tile_Pin4T2    Tile = 50
	Tile_Pin4T3    Tile = 51
	Tile_Pin4T4    Tile = 52
	Tile_Pin5T1    Tile = 53
	Tile_Pin5T2    Tile = 54
	Tile_Pin5T3    Tile = 55
	Tile_Pin5T4    Tile = 56
	Tile_Pin6T1    Tile = 57
	Tile_Pin6T2    Tile = 58
	Tile_Pin6T3    Tile = 59
	Tile_Pin6T4    Tile = 60
	Tile_Pin7T1    Tile = 61
	Tile_Pin7T2    Tile = 62
	Tile_Pin7T3    Tile = 63
	Tile_Pin7T4    Tile = 64
	Tile_Pin8T1    Tile = 65
	Tile_Pin8T2    Tile = 66
	Tile_Pin8T3    Tile = 67
	Tile_Pin8T4    Tile = 68
	Tile_Pin9T1    Tile = 69
	Tile_Pin9T2    Tile = 70
	Tile_Pin9T3    Tile = 71
	Tile_Pin9T4    Tile = 72
	Tile_Sou1T1    Tile = 73
	Tile_Sou1T2    Tile = 74
	Tile_Sou1T3    Tile = 75
	Tile_Sou1T4    Tile = 76
	Tile_Sou2T1    Tile = 77
	Tile_Sou2T2    Tile = 78
	Tile_Sou2T3    Tile = 79
	Tile_Sou2T4    Tile = 80
	Tile_Sou3T1    Tile = 81
	Tile_Sou3T2    Tile = 82
	Tile_Sou3T3    Tile = 83
	Tile_Sou3T4    Tile = 84
	Tile_Sou4T1    Tile = 85
	Tile_Sou4T2    Tile = 86
	Tile_Sou4T3    Tile = 87
	Tile_Sou4T4    Tile = 88
	Tile_Sou5T1    Tile = 89
	Tile_Sou5T2    Tile = 90
	Tile_Sou5T3    Tile = 91
	Tile_Sou5T4    Tile = 92
	Tile_Sou6T1    Tile = 93
	Tile_Sou6T2    Tile = 94
	Tile_Sou6T3    Tile = 95
	Tile_Sou6T4    Tile = 96
	Tile_Sou7T1    Tile = 97
	Tile_Sou7T2    Tile = 98
	Tile_Sou7T3    Tile = 99
	Tile_Sou7T4    Tile = 100
	Tile_Sou8T1    Tile = 101
	Tile_Sou8T2    Tile = 102
	Tile_Sou8T3    Tile = 103
	Tile_Sou8T4    Tile = 104
	Tile_Sou9T1    Tile = 105
	Tile_Sou9T2    Tile = 106
	Tile_Sou9T3    Tile = 107
	Tile_Sou9T4    Tile = 108
	Tile_Ton1      Tile = 109
	Tile_Ton2      Tile = 110
	Tile_Ton3      Tile = 111
	Tile_Ton4      Tile = 112
	Tile_Nan1      Tile = 113
	Tile_Nan2      Tile = 114
	Tile_Nan3      Tile = 115
	Tile_Nan4      Tile = 116
	Tile_Shaa1     Tile = 117
	Tile_Shaa2     Tile = 118
	Tile_Shaa3     Tile = 119
	Tile_Shaa4     Tile = 120
	Tile_Pei1      Tile = 121
	Tile_Pei2      Tile = 122
	Tile_Pei3      Tile = 123
	Tile_Pei4      Tile = 124
	Tile_Haku1     Tile = 125
	Tile_Haku2     Tile = 126
	Tile_Haku3     Tile = 127
	Tile_Haku4     Tile = 128
	Tile_Hatsu1    Tile = 129
	Tile_Hatsu2    Tile = 130
	Tile_Hatsu3    Tile = 131
	Tile_Hatsu4    Tile = 132
	Tile_Chun1     Tile = 133
	Tile_Chun2     Tile = 134
	Tile_Chun3     Tile = 135
	Tile_Chun4     Tile = 136
)

// Enum value maps for Tile.
var (
	Tile_name = map[int32]string{
		0:   "TileDummy",
		1:   "Man1T1",
		2:   "Man1T2",
		3:   "Man1T3",
		4:   "Man1T4",
		5:   "Man2T1",
		6:   "Man2T2",
		7:   "Man2T3",
		8:   "Man2T4",
		9:   "Man3T1",
		10:  "Man3T2",
		11:  "Man3T3",
		12:  "Man3T4",
		13:  "Man4T1",
		14:  "Man4T2",
		15:  "Man4T3",
		16:  "Man4T4",
		17:  "Man5T1",
		18:  "Man5T2",
		19:  "Man5T3",
		20:  "Man5T4",
		21:  "Man6T1",
		22:  "Man6T2",
		23:  "Man6T3",
		24:  "Man6T4",
		25:  "Man7T1",
		26:  "Man7T2",
		27:  "Man7T3",
		28:  "Man7T4",
		29:  "Man8T1",
		30:  "Man8T2",
		31:  "Man8T3",
		32:  "Man8T4",
		33:  "Man9T1",
		34:  "Man9T2",
		35:  "Man9T3",
		36:  "Man9T4",
		37:  "Pin1T1",
		38:  "Pin1T2",
		39:  "Pin1T3",
		40:  "Pin1T4",
		41:  "Pin2T1",
		42:  "Pin2T2",
		43:  "Pin2T3",
		44:  "Pin2T4",
		45:  "Pin3T1",
		46:  "Pin3T2",
		47:  "Pin3T3",
		48:  "Pin3T4",
		49:  "Pin4T1",
		50:  "Pin4T2",
		51:  "Pin4T3",
		52:  "Pin4T4",
		53:  "Pin5T1",
		54:  "Pin5T2",
		55:  "Pin5T3",
		56:  "Pin5T4",
		57:  "Pin6T1",
		58:  "Pin6T2",
		59:  "Pin6T3",
		60:  "Pin6T4",
		61:  "Pin7T1",
		62:  "Pin7T2",
		63:  "Pin7T3",
		64:  "Pin7T4",
		65:  "Pin8T1",
		66:  "Pin8T2",
		67:  "Pin8T3",
		68:  "Pin8T4",
		69:  "Pin9T1",
		70:  "Pin9T2",
		71:  "Pin9T3",
		72:  "Pin9T4",
		73:  "Sou1T1",
		74:  "Sou1T2",
		75:  "Sou1T3",
		76:  "Sou1T4",
		77:  "Sou2T1",
		78:  "Sou2T2",
		79:  "Sou2T3",
		80:  "Sou2T4",
		81:  "Sou3T1",
		82:  "Sou3T2",
		83:  "Sou3T3",
		84:  "Sou3T4",
		85:  "Sou4T1",
		86:  "Sou4T2",
		87:  "Sou4T3",
		88:  "Sou4T4",
		89:  "Sou5T1",
		90:  "Sou5T2",
		91:  "Sou5T3",
		92:  "Sou5T4",
		93:  "Sou6T1",
		94:  "Sou6T2",
		95:  "Sou6T3",
		96:  "Sou6T4",
		97:  "Sou7T1",
		98:  "Sou7T2",
		99:  "Sou7T3",
		100: "Sou7T4",
		101: "Sou8T1",
		102: "Sou8T2",
		103: "Sou8T3",
		104: "Sou8T4",
		105: "Sou9T1",
		106: "Sou9T2",
		107: "Sou9T3",
		108: "Sou9T4",
		109: "Ton1",
		110: "Ton2",
		111: "Ton3",
		112: "Ton4",
		113: "Nan1",
		114: "Nan2",
		115: "Nan3",
		116: "Nan4",
		117: "Shaa1",
		118: "Shaa2",
		119: "Shaa3",
		120: "Shaa4",
		121: "Pei1",
		122: "Pei2",
		123: "Pei3",
		124: "Pei4",
		125: "Haku1",
		126: "Haku2",
		127: "Haku3",
		128: "Haku4",
		129: "Hatsu1",
		130: "Hatsu2",
		131: "Hatsu3",
		132: "Hatsu4",
		133: "Chun1",
		134: "Chun2",
		135: "Chun3",
		136: "Chun4",
	}
	Tile_value = map[string]int32{
		"TileDummy": 0,
		"Man1T1":    1,
		"Man1T2":    2,
		"Man1T3":    3,
		"Man1T4":    4,
		"Man2T1":    5,
		"Man2T2":    6,
		"Man2T3":    7,
		"Man2T4":    8,
		"Man3T1":    9,
		"Man3T2":    10,
		"Man3T3":    11,
		"Man3T4":    12,
		"Man4T1":    13,
		"Man4T2":    14,
		"Man4T3":    15,
		"Man4T4":    16,
		"Man5T1":    17,
		"Man5T2":    18,
		"Man5T3":    19,
		"Man5T4":    20,
		"Man6T1":    21,
		"Man6T2":    22,
		"Man6T3":    23,
		"Man6T4":    24,
		"Man7T1":    25,
		"Man7T2":    26,
		"Man7T3":    27,
		"Man7T4":    28,
		"Man8T1":    29,
		"Man8T2":    30,
		"Man8T3":    31,
		"Man8T4":    32,
		"Man9T1":    33,
		"Man9T2":    34,
		"Man9T3":    35,
		"Man9T4":    36,
		"Pin1T1":    37,
		"Pin1T2":    38,
		"Pin1T3":    39,
		"Pin1T4":    40,
		"Pin2T1":    41,
		"Pin2T2":    42,
		"Pin2T3":    43,
		"Pin2T4":    44,
		"Pin3T1":    45,
		"Pin3T2":    46,
		"Pin3T3":    47,
		"Pin3T4":    48,
		"Pin4T1":    49,
		"Pin4T2":    50,
		"Pin4T3":    51,
		"Pin4T4":    52,
		"Pin5T1":    53,
		"Pin5T2":    54,
		"Pin5T3":    55,
		"Pin5T4":    56,
		"Pin6T1":    57,
		"Pin6T2":    58,
		"Pin6T3":    59,
		"Pin6T4":    60,
		"Pin7T1":    61,
		"Pin7T2":    62,
		"Pin7T3":    63,
		"Pin7T4":    64,
		"Pin8T1":    65,
		"Pin8T2":    66,
		"Pin8T3":    67,
		"Pin8T4":    68,
		"Pin9T1":    69,
		"Pin9T2":    70,
		"Pin9T3":    71,
		"Pin9T4":    72,
		"Sou1T1":    73,
		"Sou1T2":    74,
		"Sou1T3":    75,
		"Sou1T4":    76,
		"Sou2T1":    77,
		"Sou2T2":    78,
		"Sou2T3":    79,
		"Sou2T4":    80,
		"Sou3T1":    81,
		"Sou3T2":    82,
		"Sou3T3":    83,
		"Sou3T4":    84,
		"Sou4T1":    85,
		"Sou4T2":    86,
		"Sou4T3":    87,
		"Sou4T4":    88,
		"Sou5T1":    89,
		"Sou5T2":    90,
		"Sou5T3":    91,
		"Sou5T4":    92,
		"Sou6T1":    93,
		"Sou6T2":    94,
		"Sou6T3":    95,
		"Sou6T4":    96,
		"Sou7T1":    97,
		"Sou7T2":    98,
		"Sou7T3":    99,
		"Sou7T4":    100,
		"Sou8T1":    101,
		"Sou8T2":    102,
		"Sou8T3":    103,
		"Sou8T4":    104,
		"Sou9T1":    105,
		"Sou9T2":    106,
		"Sou9T3":    107,
		"Sou9T4":    108,
		"Ton1":      109,
		"Ton2":      110,
		"Ton3":      111,
		"Ton4":      112,
		"Nan1":      113,
		"Nan2":      114,
		"Nan3":      115,
		"Nan4":      116,
		"Shaa1":     117,
		"Shaa2":     118,
		"Shaa3":     119,
		"Shaa4":     120,
		"Pei1":      121,
		"Pei2":      122,
		"Pei3":      123,
		"Pei4":      124,
		"Haku1":     125,
		"Haku2":     126,
		"Haku3":     127,
		"Haku4":     128,
		"Hatsu1":    129,
		"Hatsu2":    130,
		"Hatsu3":    131,
		"Hatsu4":    132,
		"Chun1":     133,
		"Chun2":     134,
		"Chun3":     135,
		"Chun4":     136,
	}
)

func (x Tile) Enum() *Tile {
	p := new(Tile)
	*p = x
	return p
}

func (x Tile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tile) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[9].Descriptor()
}

func (Tile) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[9]
}

func (x Tile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tile.Descriptor instead.
func (Tile) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{9}
}

type TileClass int32

const (
	TileClass_TileClassDummy TileClass = 0
	TileClass_Man1           TileClass = 1
	TileClass_Man2           TileClass = 2
	TileClass_Man3           TileClass = 3
	TileClass_Man4           TileClass = 4
	TileClass_Man5           TileClass = 5
	TileClass_Man6           TileClass = 6
	TileClass_Man7           TileClass = 7
	TileClass_Man8           TileClass = 8
	TileClass_Man9           TileClass = 9
	TileClass_Pin1           TileClass = 10
	TileClass_Pin2           TileClass = 11
	TileClass_Pin3           TileClass = 12
	TileClass_Pin4           TileClass = 13
	TileClass_Pin5           TileClass = 14
	TileClass_Pin6           TileClass = 15
	TileClass_Pin7           TileClass = 16
	TileClass_Pin8           TileClass = 17
	TileClass_Pin9           TileClass = 18
	TileClass_Sou1           TileClass = 19
	TileClass_Sou2           TileClass = 20
	TileClass_Sou3           TileClass = 21
	TileClass_Sou4           TileClass = 22
	TileClass_Sou5           TileClass = 23
	TileClass_Sou6           TileClass = 24
	TileClass_Sou7           TileClass = 25
	TileClass_Sou8           TileClass = 26
	TileClass_Sou9           TileClass = 27
	TileClass_Ton            TileClass = 28
	TileClass_Nan            TileClass = 29
	TileClass_Shaa           TileClass = 30
	TileClass_Pei            TileClass = 31
	TileClass_Haku           TileClass = 32
	TileClass_Hatsu          TileClass = 33
	TileClass_Chun           TileClass = 34
	TileClass_RedMan5        TileClass = 35
	TileClass_RedPin5        TileClass = 36
	TileClass_RedSou5        TileClass = 37
)

// Enum value maps for TileClass.
var (
	TileClass_name = map[int32]string{
		0:  "TileClassDummy",
		1:  "Man1",
		2:  "Man2",
		3:  "Man3",
		4:  "Man4",
		5:  "Man5",
		6:  "Man6",
		7:  "Man7",
		8:  "Man8",
		9:  "Man9",
		10: "Pin1",
		11: "Pin2",
		12: "Pin3",
		13: "Pin4",
		14: "Pin5",
		15: "Pin6",
		16: "Pin7",
		17: "Pin8",
		18: "Pin9",
		19: "Sou1",
		20: "Sou2",
		21: "Sou3",
		22: "Sou4",
		23: "Sou5",
		24: "Sou6",
		25: "Sou7",
		26: "Sou8",
		27: "Sou9",
		28: "Ton",
		29: "Nan",
		30: "Shaa",
		31: "Pei",
		32: "Haku",
		33: "Hatsu",
		34: "Chun",
		35: "RedMan5",
		36: "RedPin5",
		37: "RedSou5",
	}
	TileClass_value = map[string]int32{
		"TileClassDummy": 0,
		"Man1":           1,
		"Man2":           2,
		"Man3":           3,
		"Man4":           4,
		"Man5":           5,
		"Man6":           6,
		"Man7":           7,
		"Man8":           8,
		"Man9":           9,
		"Pin1":           10,
		"Pin2":           11,
		"Pin3":           12,
		"Pin4":           13,
		"Pin5":           14,
		"Pin6":           15,
		"Pin7":           16,
		"Pin8":           17,
		"Pin9":           18,
		"Sou1":           19,
		"Sou2":           20,
		"Sou3":           21,
		"Sou4":           22,
		"Sou5":           23,
		"Sou6":           24,
		"Sou7":           25,
		"Sou8":           26,
		"Sou9":           27,
		"Ton":            28,
		"Nan":            29,
		"Shaa":           30,
		"Pei":            31,
		"Haku":           32,
		"Hatsu":          33,
		"Chun":           34,
		"RedMan5":        35,
		"RedPin5":        36,
		"RedSou5":        37,
	}
)

func (x TileClass) Enum() *TileClass {
	p := new(TileClass)
	*p = x
	return p
}

func (x TileClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TileClass) Descriptor() protoreflect.EnumDescriptor {
	return file_app_api_v1_robot_robot_proto_enumTypes[10].Descriptor()
}

func (TileClass) Type() protoreflect.EnumType {
	return &file_app_api_v1_robot_robot_proto_enumTypes[10]
}

func (x TileClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TileClass.Descriptor instead.
func (TileClass) EnumDescriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{10}
}

type ChooseActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events       []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	ValidActions []*Call  `protobuf:"bytes,2,rep,name=validActions,proto3" json:"validActions,omitempty"`
}

func (x *ChooseActionRequest) Reset() {
	*x = ChooseActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseActionRequest) ProtoMessage() {}

func (x *ChooseActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseActionRequest.ProtoReflect.Descriptor instead.
func (*ChooseActionRequest) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{0}
}

func (x *ChooseActionRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ChooseActionRequest) GetValidActions() []*Call {
	if x != nil {
		return x.ValidActions
	}
	return nil
}

type ChooseActionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionIdx int32 `protobuf:"varint,1,opt,name=actionIdx,proto3" json:"actionIdx,omitempty"`
}

func (x *ChooseActionReply) Reset() {
	*x = ChooseActionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseActionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseActionReply) ProtoMessage() {}

func (x *ChooseActionReply) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseActionReply.ProtoReflect.Descriptor instead.
func (*ChooseActionReply) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{1}
}

func (x *ChooseActionReply) GetActionIdx() int32 {
	if x != nil {
		return x.ActionIdx
	}
	return 0
}

type JsonMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JsonMessage) Reset() {
	*x = JsonMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonMessage) ProtoMessage() {}

func (x *JsonMessage) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonMessage.ProtoReflect.Descriptor instead.
func (*JsonMessage) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{2}
}

func (x *JsonMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    CallType `protobuf:"varint,1,opt,name=type,proto3,enum=grpcRobot.CallType" json:"type,omitempty"`
	Tiles   []Tile   `protobuf:"varint,2,rep,packed,name=tiles,proto3,enum=grpcRobot.Tile" json:"tiles,omitempty"`
	FromWho []Wind   `protobuf:"varint,3,rep,packed,name=fromWho,proto3,enum=grpcRobot.Wind" json:"fromWho,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{3}
}

func (x *Call) GetType() CallType {
	if x != nil {
		return x.Type
	}
	return CallType_Skip
}

func (x *Call) GetTiles() []Tile {
	if x != nil {
		return x.Tiles
	}
	return nil
}

func (x *Call) GetFromWho() []Wind {
	if x != nil {
		return x.FromWho
	}
	return nil
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{4}
}

func (x *Events) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*Event_EventStart
	//	*Event_EventEnd
	//	*Event_EventGet
	//	*Event_EventDiscard
	//	*Event_EventCall
	//	*Event_EventRiichi
	//	*Event_EventNewIndicator
	//	*Event_EventRon
	//	*Event_EventTsumo
	//	*Event_EventRyuuKyoKu
	//	*Event_EventFuriten
	//	*Event_EventNagashiMangan
	//	*Event_EventTenpaiEnd
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{5}
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetEventStart() *EventStart {
	if x, ok := x.GetEvent().(*Event_EventStart); ok {
		return x.EventStart
	}
	return nil
}

func (x *Event) GetEventEnd() *EventEnd {
	if x, ok := x.GetEvent().(*Event_EventEnd); ok {
		return x.EventEnd
	}
	return nil
}

func (x *Event) GetEventGet() *EventGet {
	if x, ok := x.GetEvent().(*Event_EventGet); ok {
		return x.EventGet
	}
	return nil
}

func (x *Event) GetEventDiscard() *EventDiscard {
	if x, ok := x.GetEvent().(*Event_EventDiscard); ok {
		return x.EventDiscard
	}
	return nil
}

func (x *Event) GetEventCall() *EventCall {
	if x, ok := x.GetEvent().(*Event_EventCall); ok {
		return x.EventCall
	}
	return nil
}

func (x *Event) GetEventRiichi() *EventRiichi {
	if x, ok := x.GetEvent().(*Event_EventRiichi); ok {
		return x.EventRiichi
	}
	return nil
}

func (x *Event) GetEventNewIndicator() *EventNewIndicator {
	if x, ok := x.GetEvent().(*Event_EventNewIndicator); ok {
		return x.EventNewIndicator
	}
	return nil
}

func (x *Event) GetEventRon() *EventRon {
	if x, ok := x.GetEvent().(*Event_EventRon); ok {
		return x.EventRon
	}
	return nil
}

func (x *Event) GetEventTsumo() *EventTsumo {
	if x, ok := x.GetEvent().(*Event_EventTsumo); ok {
		return x.EventTsumo
	}
	return nil
}

func (x *Event) GetEventRyuuKyoKu() *EventRyuuKyoKu {
	if x, ok := x.GetEvent().(*Event_EventRyuuKyoKu); ok {
		return x.EventRyuuKyoKu
	}
	return nil
}

func (x *Event) GetEventFuriten() *EventFuriten {
	if x, ok := x.GetEvent().(*Event_EventFuriten); ok {
		return x.EventFuriten
	}
	return nil
}

func (x *Event) GetEventNagashiMangan() *EventNagashiMangan {
	if x, ok := x.GetEvent().(*Event_EventNagashiMangan); ok {
		return x.EventNagashiMangan
	}
	return nil
}

func (x *Event) GetEventTenpaiEnd() *EventTenpaiEnd {
	if x, ok := x.GetEvent().(*Event_EventTenpaiEnd); ok {
		return x.EventTenpaiEnd
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_EventStart struct {
	EventStart *EventStart `protobuf:"bytes,1,opt,name=eventStart,proto3,oneof"`
}

type Event_EventEnd struct {
	EventEnd *EventEnd `protobuf:"bytes,2,opt,name=eventEnd,proto3,oneof"`
}

type Event_EventGet struct {
	EventGet *EventGet `protobuf:"bytes,3,opt,name=eventGet,proto3,oneof"`
}

type Event_EventDiscard struct {
	EventDiscard *EventDiscard `protobuf:"bytes,4,opt,name=eventDiscard,proto3,oneof"`
}

type Event_EventCall struct {
	EventCall *EventCall `protobuf:"bytes,5,opt,name=eventCall,proto3,oneof"`
}

type Event_EventRiichi struct {
	EventRiichi *EventRiichi `protobuf:"bytes,6,opt,name=eventRiichi,proto3,oneof"`
}

type Event_EventNewIndicator struct {
	EventNewIndicator *EventNewIndicator `protobuf:"bytes,7,opt,name=eventNewIndicator,proto3,oneof"`
}

type Event_EventRon struct {
	EventRon *EventRon `protobuf:"bytes,8,opt,name=eventRon,proto3,oneof"`
}

type Event_EventTsumo struct {
	EventTsumo *EventTsumo `protobuf:"bytes,9,opt,name=eventTsumo,proto3,oneof"`
}

type Event_EventRyuuKyoKu struct {
	EventRyuuKyoKu *EventRyuuKyoKu `protobuf:"bytes,10,opt,name=eventRyuuKyoKu,proto3,oneof"`
}

type Event_EventFuriten struct {
	EventFuriten *EventFuriten `protobuf:"bytes,11,opt,name=eventFuriten,proto3,oneof"`
}

type Event_EventNagashiMangan struct {
	EventNagashiMangan *EventNagashiMangan `protobuf:"bytes,12,opt,name=eventNagashiMangan,proto3,oneof"`
}

type Event_EventTenpaiEnd struct {
	EventTenpaiEnd *EventTenpaiEnd `protobuf:"bytes,13,opt,name=eventTenpaiEnd,proto3,oneof"`
}

func (*Event_EventStart) isEvent_Event() {}

func (*Event_EventEnd) isEvent_Event() {}

func (*Event_EventGet) isEvent_Event() {}

func (*Event_EventDiscard) isEvent_Event() {}

func (*Event_EventCall) isEvent_Event() {}

func (*Event_EventRiichi) isEvent_Event() {}

func (*Event_EventNewIndicator) isEvent_Event() {}

func (*Event_EventRon) isEvent_Event() {}

func (*Event_EventTsumo) isEvent_Event() {}

func (*Event_EventRyuuKyoKu) isEvent_Event() {}

func (*Event_EventFuriten) isEvent_Event() {}

func (*Event_EventNagashiMangan) isEvent_Event() {}

func (*Event_EventTenpaiEnd) isEvent_Event() {}

type EventStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindRound         WindRound       `protobuf:"varint,1,opt,name=windRound,proto3,enum=grpcRobot.WindRound" json:"windRound,omitempty"`
	InitWind          Wind            `protobuf:"varint,2,opt,name=initWind,proto3,enum=grpcRobot.Wind" json:"initWind,omitempty"`
	Seed              int64           `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	NumGame           int32           `protobuf:"varint,4,opt,name=numGame,proto3" json:"numGame,omitempty"`
	NumHonba          int32           `protobuf:"varint,5,opt,name=numHonba,proto3" json:"numHonba,omitempty"`
	NumRiichi         int32           `protobuf:"varint,6,opt,name=numRiichi,proto3" json:"numRiichi,omitempty"`
	InitDoraIndicator Tile            `protobuf:"varint,7,opt,name=initDoraIndicator,proto3,enum=grpcRobot.Tile" json:"initDoraIndicator,omitempty"`
	InitTiles         []Tile          `protobuf:"varint,8,rep,packed,name=initTiles,proto3,enum=grpcRobot.Tile" json:"initTiles,omitempty"`
	GameRule          *Rule           `protobuf:"bytes,9,opt,name=gameRule,proto3" json:"gameRule,omitempty"`
	PlayersPoints     map[int32]int32 `protobuf:"bytes,10,rep,name=playersPoints,proto3" json:"playersPoints,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EventStart) Reset() {
	*x = EventStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStart) ProtoMessage() {}

func (x *EventStart) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStart.ProtoReflect.Descriptor instead.
func (*EventStart) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{6}
}

func (x *EventStart) GetWindRound() WindRound {
	if x != nil {
		return x.WindRound
	}
	return WindRound_WindRoundDummy
}

func (x *EventStart) GetInitWind() Wind {
	if x != nil {
		return x.InitWind
	}
	return Wind_WindDummy
}

func (x *EventStart) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *EventStart) GetNumGame() int32 {
	if x != nil {
		return x.NumGame
	}
	return 0
}

func (x *EventStart) GetNumHonba() int32 {
	if x != nil {
		return x.NumHonba
	}
	return 0
}

func (x *EventStart) GetNumRiichi() int32 {
	if x != nil {
		return x.NumRiichi
	}
	return 0
}

func (x *EventStart) GetInitDoraIndicator() Tile {
	if x != nil {
		return x.InitDoraIndicator
	}
	return Tile_TileDummy
}

func (x *EventStart) GetInitTiles() []Tile {
	if x != nil {
		return x.InitTiles
	}
	return nil
}

func (x *EventStart) GetGameRule() *Rule {
	if x != nil {
		return x.GameRule
	}
	return nil
}

func (x *EventStart) GetPlayersPoints() map[int32]int32 {
	if x != nil {
		return x.PlayersPoints
	}
	return nil
}

type EventEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EastPointsChange  int32 `protobuf:"varint,1,opt,name=eastPointsChange,proto3" json:"eastPointsChange,omitempty"`
	SouthPointsChange int32 `protobuf:"varint,2,opt,name=southPointsChange,proto3" json:"southPointsChange,omitempty"`
	WestPointsChange  int32 `protobuf:"varint,3,opt,name=westPointsChange,proto3" json:"westPointsChange,omitempty"`
	NorthPointsChange int32 `protobuf:"varint,4,opt,name=northPointsChange,proto3" json:"northPointsChange,omitempty"`
}

func (x *EventEnd) Reset() {
	*x = EventEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEnd) ProtoMessage() {}

func (x *EventEnd) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEnd.ProtoReflect.Descriptor instead.
func (*EventEnd) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{7}
}

func (x *EventEnd) GetEastPointsChange() int32 {
	if x != nil {
		return x.EastPointsChange
	}
	return 0
}

func (x *EventEnd) GetSouthPointsChange() int32 {
	if x != nil {
		return x.SouthPointsChange
	}
	return 0
}

func (x *EventEnd) GetWestPointsChange() int32 {
	if x != nil {
		return x.WestPointsChange
	}
	return 0
}

func (x *EventEnd) GetNorthPointsChange() int32 {
	if x != nil {
		return x.NorthPointsChange
	}
	return 0
}

type EventGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who         Wind                  `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
	Tile        Tile                  `protobuf:"varint,2,opt,name=tile,proto3,enum=grpcRobot.Tile" json:"tile,omitempty"`
	TenpaiInfos map[int32]*TenpaiInfo `protobuf:"bytes,3,rep,name=tenpaiInfos,proto3" json:"tenpaiInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventGet) Reset() {
	*x = EventGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventGet) ProtoMessage() {}

func (x *EventGet) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventGet.ProtoReflect.Descriptor instead.
func (*EventGet) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{8}
}

func (x *EventGet) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

func (x *EventGet) GetTile() Tile {
	if x != nil {
		return x.Tile
	}
	return Tile_TileDummy
}

func (x *EventGet) GetTenpaiInfos() map[int32]*TenpaiInfo {
	if x != nil {
		return x.TenpaiInfos
	}
	return nil
}

type EventDiscard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who        Wind        `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
	Tile       Tile        `protobuf:"varint,2,opt,name=tile,proto3,enum=grpcRobot.Tile" json:"tile,omitempty"`
	TsumoGiri  bool        `protobuf:"varint,3,opt,name=tsumoGiri,proto3" json:"tsumoGiri,omitempty"`
	TenpaiInfo *TenpaiInfo `protobuf:"bytes,4,opt,name=tenpaiInfo,proto3,oneof" json:"tenpaiInfo,omitempty"`
}

func (x *EventDiscard) Reset() {
	*x = EventDiscard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDiscard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDiscard) ProtoMessage() {}

func (x *EventDiscard) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDiscard.ProtoReflect.Descriptor instead.
func (*EventDiscard) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{9}
}

func (x *EventDiscard) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

func (x *EventDiscard) GetTile() Tile {
	if x != nil {
		return x.Tile
	}
	return Tile_TileDummy
}

func (x *EventDiscard) GetTsumoGiri() bool {
	if x != nil {
		return x.TsumoGiri
	}
	return false
}

func (x *EventDiscard) GetTenpaiInfo() *TenpaiInfo {
	if x != nil {
		return x.TenpaiInfo
	}
	return nil
}

type EventCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who         Wind                  `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
	Call        *Call                 `protobuf:"bytes,2,opt,name=call,proto3" json:"call,omitempty"`
	TenpaiInfos map[int32]*TenpaiInfo `protobuf:"bytes,3,rep,name=tenpaiInfos,proto3" json:"tenpaiInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventCall) Reset() {
	*x = EventCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCall) ProtoMessage() {}

func (x *EventCall) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCall.ProtoReflect.Descriptor instead.
func (*EventCall) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{10}
}

func (x *EventCall) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

func (x *EventCall) GetCall() *Call {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *EventCall) GetTenpaiInfos() map[int32]*TenpaiInfo {
	if x != nil {
		return x.TenpaiInfos
	}
	return nil
}

type EventRiichi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who  Wind  `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
	Step int32 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *EventRiichi) Reset() {
	*x = EventRiichi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRiichi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRiichi) ProtoMessage() {}

func (x *EventRiichi) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRiichi.ProtoReflect.Descriptor instead.
func (*EventRiichi) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{11}
}

func (x *EventRiichi) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

func (x *EventRiichi) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type EventNewIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tile Tile `protobuf:"varint,1,opt,name=tile,proto3,enum=grpcRobot.Tile" json:"tile,omitempty"`
}

func (x *EventNewIndicator) Reset() {
	*x = EventNewIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNewIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNewIndicator) ProtoMessage() {}

func (x *EventNewIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNewIndicator.ProtoReflect.Descriptor instead.
func (*EventNewIndicator) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{12}
}

func (x *EventNewIndicator) GetTile() Tile {
	if x != nil {
		return x.Tile
	}
	return Tile_TileDummy
}

type EventRon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who       Wind    `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
	FromWho   Wind    `protobuf:"varint,2,opt,name=fromWho,proto3,enum=grpcRobot.Wind" json:"fromWho,omitempty"`
	HandTiles []Tile  `protobuf:"varint,3,rep,packed,name=handTiles,proto3,enum=grpcRobot.Tile" json:"handTiles,omitempty"`
	WinTile   Tile    `protobuf:"varint,4,opt,name=winTile,proto3,enum=grpcRobot.Tile" json:"winTile,omitempty"`
	Result    *Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *EventRon) Reset() {
	*x = EventRon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRon) ProtoMessage() {}

func (x *EventRon) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRon.ProtoReflect.Descriptor instead.
func (*EventRon) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{13}
}

func (x *EventRon) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

func (x *EventRon) GetFromWho() Wind {
	if x != nil {
		return x.FromWho
	}
	return Wind_WindDummy
}

func (x *EventRon) GetHandTiles() []Tile {
	if x != nil {
		return x.HandTiles
	}
	return nil
}

func (x *EventRon) GetWinTile() Tile {
	if x != nil {
		return x.WinTile
	}
	return Tile_TileDummy
}

func (x *EventRon) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type EventTsumo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who       Wind    `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
	HandTiles []Tile  `protobuf:"varint,2,rep,packed,name=handTiles,proto3,enum=grpcRobot.Tile" json:"handTiles,omitempty"`
	WinTile   Tile    `protobuf:"varint,3,opt,name=winTile,proto3,enum=grpcRobot.Tile" json:"winTile,omitempty"`
	Result    *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *EventTsumo) Reset() {
	*x = EventTsumo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTsumo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTsumo) ProtoMessage() {}

func (x *EventTsumo) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTsumo.ProtoReflect.Descriptor instead.
func (*EventTsumo) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{14}
}

func (x *EventTsumo) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

func (x *EventTsumo) GetHandTiles() []Tile {
	if x != nil {
		return x.HandTiles
	}
	return nil
}

func (x *EventTsumo) GetWinTile() Tile {
	if x != nil {
		return x.WinTile
	}
	return Tile_TileDummy
}

func (x *EventTsumo) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type EventRyuuKyoKu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who       Wind            `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
	HandTiles []Tile          `protobuf:"varint,2,rep,packed,name=handTiles,proto3,enum=grpcRobot.Tile" json:"handTiles,omitempty"`
	Reason    RyuuKyoKuReason `protobuf:"varint,3,opt,name=reason,proto3,enum=grpcRobot.RyuuKyoKuReason" json:"reason,omitempty"`
}

func (x *EventRyuuKyoKu) Reset() {
	*x = EventRyuuKyoKu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRyuuKyoKu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRyuuKyoKu) ProtoMessage() {}

func (x *EventRyuuKyoKu) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRyuuKyoKu.ProtoReflect.Descriptor instead.
func (*EventRyuuKyoKu) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{15}
}

func (x *EventRyuuKyoKu) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

func (x *EventRyuuKyoKu) GetHandTiles() []Tile {
	if x != nil {
		return x.HandTiles
	}
	return nil
}

func (x *EventRyuuKyoKu) GetReason() RyuuKyoKuReason {
	if x != nil {
		return x.Reason
	}
	return RyuuKyoKuReason_RyuuKyokuNormal
}

type EventFuriten struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who    Wind          `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
	Reason FuritenReason `protobuf:"varint,2,opt,name=reason,proto3,enum=grpcRobot.FuritenReason" json:"reason,omitempty"`
}

func (x *EventFuriten) Reset() {
	*x = EventFuriten{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventFuriten) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFuriten) ProtoMessage() {}

func (x *EventFuriten) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFuriten.ProtoReflect.Descriptor instead.
func (*EventFuriten) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{16}
}

func (x *EventFuriten) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

func (x *EventFuriten) GetReason() FuritenReason {
	if x != nil {
		return x.Reason
	}
	return FuritenReason_FuritenNone
}

type EventNagashiMangan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who Wind `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
}

func (x *EventNagashiMangan) Reset() {
	*x = EventNagashiMangan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNagashiMangan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNagashiMangan) ProtoMessage() {}

func (x *EventNagashiMangan) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNagashiMangan.ProtoReflect.Descriptor instead.
func (*EventNagashiMangan) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{17}
}

func (x *EventNagashiMangan) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

type EventTenpaiEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who         Wind        `protobuf:"varint,1,opt,name=who,proto3,enum=grpcRobot.Wind" json:"who,omitempty"`
	HandTiles   []Tile      `protobuf:"varint,2,rep,packed,name=handTiles,proto3,enum=grpcRobot.Tile" json:"handTiles,omitempty"`
	TenpaiSlice []TileClass `protobuf:"varint,3,rep,packed,name=tenpaiSlice,proto3,enum=grpcRobot.TileClass" json:"tenpaiSlice,omitempty"`
}

func (x *EventTenpaiEnd) Reset() {
	*x = EventTenpaiEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTenpaiEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTenpaiEnd) ProtoMessage() {}

func (x *EventTenpaiEnd) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTenpaiEnd.ProtoReflect.Descriptor instead.
func (*EventTenpaiEnd) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{18}
}

func (x *EventTenpaiEnd) GetWho() Wind {
	if x != nil {
		return x.Who
	}
	return Wind_WindDummy
}

func (x *EventTenpaiEnd) GetHandTiles() []Tile {
	if x != nil {
		return x.HandTiles
	}
	return nil
}

func (x *EventTenpaiEnd) GetTenpaiSlice() []TileClass {
	if x != nil {
		return x.TenpaiSlice
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakuResult  *YakuResult  `protobuf:"bytes,1,opt,name=yakuResult,proto3" json:"yakuResult,omitempty"`
	ScoreResult *ScoreResult `protobuf:"bytes,2,opt,name=scoreResult,proto3" json:"scoreResult,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{19}
}

func (x *Result) GetYakuResult() *YakuResult {
	if x != nil {
		return x.YakuResult
	}
	return nil
}

func (x *Result) GetScoreResult() *ScoreResult {
	if x != nil {
		return x.ScoreResult
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameLength           int32 `protobuf:"varint,1,opt,name=gameLength,proto3" json:"gameLength,omitempty"`
	IsOpenTanyao         bool  `protobuf:"varint,2,opt,name=isOpenTanyao,proto3" json:"isOpenTanyao,omitempty"`
	HasAkaDora           bool  `protobuf:"varint,3,opt,name=hasAkaDora,proto3" json:"hasAkaDora,omitempty"`
	RenhouLimit          Limit `protobuf:"varint,4,opt,name=renhouLimit,proto3,enum=grpcRobot.Limit" json:"renhouLimit,omitempty"`
	IsHaiteiFromLiveOnly bool  `protobuf:"varint,5,opt,name=isHaiteiFromLiveOnly,proto3" json:"isHaiteiFromLiveOnly,omitempty"`
	IsUra                bool  `protobuf:"varint,6,opt,name=isUra,proto3" json:"isUra,omitempty"`
	IsIpatsu             bool  `protobuf:"varint,7,opt,name=isIpatsu,proto3" json:"isIpatsu,omitempty"`
	IsGreenRequired      bool  `protobuf:"varint,8,opt,name=isGreenRequired,proto3" json:"isGreenRequired,omitempty"`
	IsRinshanFu          bool  `protobuf:"varint,9,opt,name=isRinshanFu,proto3" json:"isRinshanFu,omitempty"`
	IsManganRound        bool  `protobuf:"varint,10,opt,name=isManganRound,proto3" json:"isManganRound,omitempty"`
	IsKazoeYakuman       bool  `protobuf:"varint,11,opt,name=isKazoeYakuman,proto3" json:"isKazoeYakuman,omitempty"`
	IsDoubleYakumans     bool  `protobuf:"varint,12,opt,name=isDoubleYakumans,proto3" json:"isDoubleYakumans,omitempty"`
	IsYakumanSum         bool  `protobuf:"varint,13,opt,name=isYakumanSum,proto3" json:"isYakumanSum,omitempty"`
	HonbaValue           int32 `protobuf:"varint,14,opt,name=honbaValue,proto3" json:"honbaValue,omitempty"`
	IsSanChaHou          bool  `protobuf:"varint,15,opt,name=isSanChaHou,proto3" json:"isSanChaHou,omitempty"`
	IsNagashiMangan      bool  `protobuf:"varint,16,opt,name=isNagashiMangan,proto3" json:"isNagashiMangan,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{20}
}

func (x *Rule) GetGameLength() int32 {
	if x != nil {
		return x.GameLength
	}
	return 0
}

func (x *Rule) GetIsOpenTanyao() bool {
	if x != nil {
		return x.IsOpenTanyao
	}
	return false
}

func (x *Rule) GetHasAkaDora() bool {
	if x != nil {
		return x.HasAkaDora
	}
	return false
}

func (x *Rule) GetRenhouLimit() Limit {
	if x != nil {
		return x.RenhouLimit
	}
	return Limit_LimitNone
}

func (x *Rule) GetIsHaiteiFromLiveOnly() bool {
	if x != nil {
		return x.IsHaiteiFromLiveOnly
	}
	return false
}

func (x *Rule) GetIsUra() bool {
	if x != nil {
		return x.IsUra
	}
	return false
}

func (x *Rule) GetIsIpatsu() bool {
	if x != nil {
		return x.IsIpatsu
	}
	return false
}

func (x *Rule) GetIsGreenRequired() bool {
	if x != nil {
		return x.IsGreenRequired
	}
	return false
}

func (x *Rule) GetIsRinshanFu() bool {
	if x != nil {
		return x.IsRinshanFu
	}
	return false
}

func (x *Rule) GetIsManganRound() bool {
	if x != nil {
		return x.IsManganRound
	}
	return false
}

func (x *Rule) GetIsKazoeYakuman() bool {
	if x != nil {
		return x.IsKazoeYakuman
	}
	return false
}

func (x *Rule) GetIsDoubleYakumans() bool {
	if x != nil {
		return x.IsDoubleYakumans
	}
	return false
}

func (x *Rule) GetIsYakumanSum() bool {
	if x != nil {
		return x.IsYakumanSum
	}
	return false
}

func (x *Rule) GetHonbaValue() int32 {
	if x != nil {
		return x.HonbaValue
	}
	return 0
}

func (x *Rule) GetIsSanChaHou() bool {
	if x != nil {
		return x.IsSanChaHou
	}
	return false
}

func (x *Rule) GetIsNagashiMangan() bool {
	if x != nil {
		return x.IsNagashiMangan
	}
	return false
}

type ChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChatRequest) Reset() {
	*x = ChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRequest) ProtoMessage() {}

func (x *ChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRequest.ProtoReflect.Descriptor instead.
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{21}
}

func (x *ChatRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Seat    int32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (x *ChatReply) Reset() {
	*x = ChatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatReply) ProtoMessage() {}

func (x *ChatReply) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatReply.ProtoReflect.Descriptor instead.
func (*ChatReply) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{22}
}

func (x *ChatReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatReply) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

type ScoreResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayRon         int32 `protobuf:"varint,1,opt,name=payRon,proto3" json:"payRon,omitempty"`
	PayRonDealer   int32 `protobuf:"varint,2,opt,name=payRonDealer,proto3" json:"payRonDealer,omitempty"`
	PayTsumo       int32 `protobuf:"varint,3,opt,name=payTsumo,proto3" json:"payTsumo,omitempty"`
	PayTsumoDealer int32 `protobuf:"varint,4,opt,name=payTsumoDealer,proto3" json:"payTsumoDealer,omitempty"`
	Special        Limit `protobuf:"varint,5,opt,name=special,proto3,enum=grpcRobot.Limit" json:"special,omitempty"`
	Han            int32 `protobuf:"varint,6,opt,name=han,proto3" json:"han,omitempty"`
	Fu             int32 `protobuf:"varint,7,opt,name=fu,proto3" json:"fu,omitempty"`
}

func (x *ScoreResult) Reset() {
	*x = ScoreResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreResult) ProtoMessage() {}

func (x *ScoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreResult.ProtoReflect.Descriptor instead.
func (*ScoreResult) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{23}
}

func (x *ScoreResult) GetPayRon() int32 {
	if x != nil {
		return x.PayRon
	}
	return 0
}

func (x *ScoreResult) GetPayRonDealer() int32 {
	if x != nil {
		return x.PayRonDealer
	}
	return 0
}

func (x *ScoreResult) GetPayTsumo() int32 {
	if x != nil {
		return x.PayTsumo
	}
	return 0
}

func (x *ScoreResult) GetPayTsumoDealer() int32 {
	if x != nil {
		return x.PayTsumoDealer
	}
	return 0
}

func (x *ScoreResult) GetSpecial() Limit {
	if x != nil {
		return x.Special
	}
	return Limit_LimitNone
}

func (x *ScoreResult) GetHan() int32 {
	if x != nil {
		return x.Han
	}
	return 0
}

func (x *ScoreResult) GetFu() int32 {
	if x != nil {
		return x.Fu
	}
	return 0
}

type YakuResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YakuSets []*YakuSet `protobuf:"bytes,1,rep,name=yakuSets,proto3" json:"yakuSets,omitempty"`
	Yakumans []Yakuman  `protobuf:"varint,2,rep,packed,name=yakumans,proto3,enum=grpcRobot.Yakuman" json:"yakumans,omitempty"`
	Bonuses  []*YakuSet `protobuf:"bytes,3,rep,name=bonuses,proto3" json:"bonuses,omitempty"`
	Fus      []*FuInfo  `protobuf:"bytes,4,rep,name=fus,proto3" json:"fus,omitempty"`
	IsClosed bool       `protobuf:"varint,5,opt,name=isClosed,proto3" json:"isClosed,omitempty"`
}

func (x *YakuResult) Reset() {
	*x = YakuResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakuResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakuResult) ProtoMessage() {}

func (x *YakuResult) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakuResult.ProtoReflect.Descriptor instead.
func (*YakuResult) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{24}
}

func (x *YakuResult) GetYakuSets() []*YakuSet {
	if x != nil {
		return x.YakuSets
	}
	return nil
}

func (x *YakuResult) GetYakumans() []Yakuman {
	if x != nil {
		return x.Yakumans
	}
	return nil
}

func (x *YakuResult) GetBonuses() []*YakuSet {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

func (x *YakuResult) GetFus() []*FuInfo {
	if x != nil {
		return x.Fus
	}
	return nil
}

func (x *YakuResult) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

type YakuSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yaku Yaku  `protobuf:"varint,1,opt,name=yaku,proto3,enum=grpcRobot.Yaku" json:"yaku,omitempty"`
	Han  int32 `protobuf:"varint,2,opt,name=han,proto3" json:"han,omitempty"`
}

func (x *YakuSet) Reset() {
	*x = YakuSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakuSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakuSet) ProtoMessage() {}

func (x *YakuSet) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakuSet.ProtoReflect.Descriptor instead.
func (*YakuSet) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{25}
}

func (x *YakuSet) GetYaku() Yaku {
	if x != nil {
		return x.Yaku
	}
	return Yaku_YakuNone
}

func (x *YakuSet) GetHan() int32 {
	if x != nil {
		return x.Han
	}
	return 0
}

type FuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fu     Fu    `protobuf:"varint,1,opt,name=fu,proto3,enum=grpcRobot.Fu" json:"fu,omitempty"`
	Points int32 `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *FuInfo) Reset() {
	*x = FuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuInfo) ProtoMessage() {}

func (x *FuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuInfo.ProtoReflect.Descriptor instead.
func (*FuInfo) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{26}
}

func (x *FuInfo) GetFu() Fu {
	if x != nil {
		return x.Fu
	}
	return Fu_FuNone
}

func (x *FuInfo) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type BoardState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindRound      WindRound              `protobuf:"varint,1,opt,name=windRound,proto3,enum=grpcRobot.WindRound" json:"windRound,omitempty"`
	NumHonba       int32                  `protobuf:"varint,2,opt,name=NumHonba,proto3" json:"NumHonba,omitempty"`
	NumRiichi      int32                  `protobuf:"varint,3,opt,name=NumRiichi,proto3" json:"NumRiichi,omitempty"`
	DoraIndicators []Tile                 `protobuf:"varint,4,rep,packed,name=doraIndicators,proto3,enum=grpcRobot.Tile" json:"doraIndicators,omitempty"`
	PlayerWind     Wind                   `protobuf:"varint,5,opt,name=playerWind,proto3,enum=grpcRobot.Wind" json:"playerWind,omitempty"`
	Position       Wind                   `protobuf:"varint,6,opt,name=position,proto3,enum=grpcRobot.Wind" json:"position,omitempty"`
	HandTiles      []Tile                 `protobuf:"varint,7,rep,packed,name=handTiles,proto3,enum=grpcRobot.Tile" json:"handTiles,omitempty"`
	ValidActions   []*Call                `protobuf:"bytes,8,rep,name=ValidActions,proto3" json:"ValidActions,omitempty"`
	NumRemainTiles int32                  `protobuf:"varint,9,opt,name=numRemainTiles,proto3" json:"numRemainTiles,omitempty"`
	PlayerStates   map[int32]*PlayerState `protobuf:"bytes,10,rep,name=playerStates,proto3" json:"playerStates,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BoardState) Reset() {
	*x = BoardState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardState) ProtoMessage() {}

func (x *BoardState) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardState.ProtoReflect.Descriptor instead.
func (*BoardState) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{27}
}

func (x *BoardState) GetWindRound() WindRound {
	if x != nil {
		return x.WindRound
	}
	return WindRound_WindRoundDummy
}

func (x *BoardState) GetNumHonba() int32 {
	if x != nil {
		return x.NumHonba
	}
	return 0
}

func (x *BoardState) GetNumRiichi() int32 {
	if x != nil {
		return x.NumRiichi
	}
	return 0
}

func (x *BoardState) GetDoraIndicators() []Tile {
	if x != nil {
		return x.DoraIndicators
	}
	return nil
}

func (x *BoardState) GetPlayerWind() Wind {
	if x != nil {
		return x.PlayerWind
	}
	return Wind_WindDummy
}

func (x *BoardState) GetPosition() Wind {
	if x != nil {
		return x.Position
	}
	return Wind_WindDummy
}

func (x *BoardState) GetHandTiles() []Tile {
	if x != nil {
		return x.HandTiles
	}
	return nil
}

func (x *BoardState) GetValidActions() []*Call {
	if x != nil {
		return x.ValidActions
	}
	return nil
}

func (x *BoardState) GetNumRemainTiles() int32 {
	if x != nil {
		return x.NumRemainTiles
	}
	return 0
}

func (x *BoardState) GetPlayerStates() map[int32]*PlayerState {
	if x != nil {
		return x.PlayerStates
	}
	return nil
}

type PlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points         int32   `protobuf:"varint,1,opt,name=points,proto3" json:"points,omitempty"`
	Melds          []*Call `protobuf:"bytes,2,rep,name=melds,proto3" json:"melds,omitempty"`
	DiscardTiles   []Tile  `protobuf:"varint,3,rep,packed,name=discardTiles,proto3,enum=grpcRobot.Tile" json:"discardTiles,omitempty"`
	TilesTsumoGiri []bool  `protobuf:"varint,4,rep,packed,name=tilesTsumoGiri,proto3" json:"tilesTsumoGiri,omitempty"`
	IsRiichi       bool    `protobuf:"varint,5,opt,name=isRiichi,proto3" json:"isRiichi,omitempty"`
}

func (x *PlayerState) Reset() {
	*x = PlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerState) ProtoMessage() {}

func (x *PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerState.ProtoReflect.Descriptor instead.
func (*PlayerState) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{28}
}

func (x *PlayerState) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *PlayerState) GetMelds() []*Call {
	if x != nil {
		return x.Melds
	}
	return nil
}

func (x *PlayerState) GetDiscardTiles() []Tile {
	if x != nil {
		return x.DiscardTiles
	}
	return nil
}

func (x *PlayerState) GetTilesTsumoGiri() []bool {
	if x != nil {
		return x.TilesTsumoGiri
	}
	return nil
}

func (x *PlayerState) GetIsRiichi() bool {
	if x != nil {
		return x.IsRiichi
	}
	return false
}

type TenpaiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TileClassesTenpaiResult map[int32]*TenpaiResult `protobuf:"bytes,1,rep,name=TileClassesTenpaiResult,proto3" json:"TileClassesTenpaiResult,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Furiten                 bool                    `protobuf:"varint,2,opt,name=Furiten,proto3" json:"Furiten,omitempty"`
}

func (x *TenpaiInfo) Reset() {
	*x = TenpaiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenpaiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenpaiInfo) ProtoMessage() {}

func (x *TenpaiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenpaiInfo.ProtoReflect.Descriptor instead.
func (*TenpaiInfo) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{29}
}

func (x *TenpaiInfo) GetTileClassesTenpaiResult() map[int32]*TenpaiResult {
	if x != nil {
		return x.TileClassesTenpaiResult
	}
	return nil
}

func (x *TenpaiInfo) GetFuriten() bool {
	if x != nil {
		return x.Furiten
	}
	return false
}

type TenpaiResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainNum int32   `protobuf:"varint,1,opt,name=RemainNum,proto3" json:"RemainNum,omitempty"`
	Result    *Result `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *TenpaiResult) Reset() {
	*x = TenpaiResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_api_v1_robot_robot_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenpaiResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenpaiResult) ProtoMessage() {}

func (x *TenpaiResult) ProtoReflect() protoreflect.Message {
	mi := &file_app_api_v1_robot_robot_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenpaiResult.ProtoReflect.Descriptor instead.
func (*TenpaiResult) Descriptor() ([]byte, []int) {
	return file_app_api_v1_robot_robot_proto_rawDescGZIP(), []int{30}
}

func (x *TenpaiResult) GetRemainNum() int32 {
	if x != nil {
		return x.RemainNum
	}
	return 0
}

func (x *TenpaiResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_app_api_v1_robot_robot_proto protoreflect.FileDescriptor

var file_app_api_v1_robot_robot_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x2f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x22, 0x74, 0x0a, 0x13, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x31, 0x0a, 0x11, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x78, 0x22, 0x27, 0x0a, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x04,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x74,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x22,
	0x32, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xb4, 0x06, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x47, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69, 0x48, 0x00,
	0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69, 0x12, 0x4c, 0x0a,
	0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x65, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x79, 0x75, 0x75, 0x4b, 0x79, 0x6f, 0x4b, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x79, 0x75, 0x75, 0x4b, 0x79, 0x6f, 0x4b, 0x75, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x79, 0x75, 0x75, 0x4b, 0x79, 0x6f, 0x4b, 0x75, 0x12, 0x3d, 0x0a, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x12, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x67, 0x61, 0x73, 0x68, 0x69, 0x4d, 0x61, 0x6e, 0x67, 0x61,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x67, 0x61, 0x73, 0x68, 0x69,
	0x4d, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x67, 0x61, 0x73, 0x68, 0x69, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x12, 0x43, 0x0a, 0x0e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x45, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x45, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x45, 0x6e,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x82, 0x04, 0x0a, 0x0a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x69, 0x6e,
	0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a,
	0x08, 0x69, 0x6e, 0x69, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x48,
	0x6f, 0x6e, 0x62, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x48,
	0x6f, 0x6e, 0x62, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x69, 0x69, 0x63, 0x68,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x69, 0x69, 0x63,
	0x68, 0x69, 0x12, 0x3d, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x72, 0x61, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x11,
	0x69, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x72, 0x61, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4e, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x40, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbe, 0x01, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x65, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x74,
	0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x65, 0x73, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x77, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e,
	0x6f, 0x72, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0xf1, 0x01, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f,
	0x12, 0x23, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52,
	0x04, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x2e,
	0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x74, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x55, 0x0a,
	0x10, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54,
	0x65, 0x6e, 0x70, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x73, 0x75, 0x6d, 0x6f, 0x47, 0x69, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x74, 0x73, 0x75, 0x6d, 0x6f, 0x47, 0x69, 0x72, 0x69, 0x12, 0x3a, 0x0a, 0x0a, 0x74,
	0x65, 0x6e, 0x70, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x70,
	0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x70, 0x61, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x6e, 0x70,
	0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf3, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x0b,
	0x74, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x70, 0x61, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x55, 0x0a, 0x10, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x0b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69, 0x12, 0x21, 0x0a, 0x03, 0x77,
	0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x22, 0x38, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x22, 0xdd, 0x01, 0x0a,
	0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x77, 0x68, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x29, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x6f, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x54,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x68, 0x61, 0x6e,
	0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4, 0x01, 0x0a,
	0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x12, 0x21, 0x0a, 0x03, 0x77,
	0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x2d,
	0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69,
	0x6c, 0x65, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52,
	0x07, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x79, 0x75,
	0x75, 0x4b, 0x79, 0x6f, 0x4b, 0x75, 0x12, 0x21, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x61, 0x6e,
	0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x68,
	0x61, 0x6e, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x52, 0x79, 0x75, 0x75, 0x4b, 0x79, 0x6f, 0x4b, 0x75, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x03,
	0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x46, 0x75, 0x72, 0x69,
	0x74, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x37, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x67, 0x61, 0x73, 0x68,
	0x69, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x45, 0x6e, 0x64, 0x12, 0x21, 0x0a,
	0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x77, 0x68, 0x6f,
	0x12, 0x2d, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e,
	0x54, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x54, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x70,
	0x61, 0x69, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x79, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x35, 0x0a, 0x0a, 0x79, 0x61, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x2e, 0x59, 0x61, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x79, 0x61,
	0x6b, 0x75, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xda, 0x04, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x6e, 0x79, 0x61, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x6e, 0x79, 0x61, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x6b, 0x61, 0x44, 0x6f, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x6b, 0x61, 0x44, 0x6f, 0x72, 0x61, 0x12,
	0x32, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x68, 0x6f, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x68, 0x6f, 0x75, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x48, 0x61, 0x69, 0x74, 0x65, 0x69, 0x46,
	0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x69, 0x73, 0x48, 0x61, 0x69, 0x74, 0x65, 0x69, 0x46, 0x72, 0x6f, 0x6d, 0x4c,
	0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x55, 0x72, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x55, 0x72, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x49, 0x70, 0x61, 0x74, 0x73, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x49, 0x70, 0x61, 0x74, 0x73, 0x75, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x6e,
	0x46, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x69, 0x6e, 0x73,
	0x68, 0x61, 0x6e, 0x46, 0x75, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x67, 0x61,
	0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x4d, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x73, 0x4b, 0x61, 0x7a, 0x6f, 0x65, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4b, 0x61, 0x7a, 0x6f, 0x65, 0x59, 0x61, 0x6b, 0x75,
	0x6d, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x59,
	0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x73, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e,
	0x53, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6e, 0x62, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x6f, 0x6e, 0x62, 0x61, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x48,
	0x6f, 0x75, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x61, 0x6e, 0x43,
	0x68, 0x61, 0x48, 0x6f, 0x75, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4e, 0x61, 0x67, 0x61, 0x73,
	0x68, 0x69, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x4e, 0x61, 0x67, 0x61, 0x73, 0x68, 0x69, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x22,
	0x27, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x65, 0x61, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x52, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x79, 0x52, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x79, 0x52, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x52, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x79, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x68, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x68, 0x61,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x66,
	0x75, 0x22, 0xdb, 0x01, 0x0a, 0x0a, 0x59, 0x61, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x79, 0x61, 0x6b, 0x75, 0x53, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x59,
	0x61, 0x6b, 0x75, 0x53, 0x65, 0x74, 0x52, 0x08, 0x79, 0x61, 0x6b, 0x75, 0x53, 0x65, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x08, 0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x59,
	0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x08, 0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x59, 0x61,
	0x6b, 0x75, 0x53, 0x65, 0x74, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x03, 0x66, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x46, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x66, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22,
	0x40, 0x0a, 0x07, 0x59, 0x61, 0x6b, 0x75, 0x53, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x79, 0x61,
	0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x59, 0x61, 0x6b, 0x75, 0x52, 0x04, 0x79, 0x61, 0x6b, 0x75, 0x12,
	0x10, 0x0a, 0x03, 0x68, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x68, 0x61,
	0x6e, 0x22, 0x3f, 0x0a, 0x06, 0x46, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x02, 0x66,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x2e, 0x46, 0x75, 0x52, 0x02, 0x66, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0xc3, 0x04, 0x0a, 0x0a, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x75, 0x6d, 0x48, 0x6f, 0x6e, 0x62,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x75, 0x6d, 0x48, 0x6f, 0x6e, 0x62,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69, 0x12,
	0x37, 0x0a, 0x0e, 0x64, 0x6f, 0x72, 0x61, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x64, 0x6f, 0x72, 0x61, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x54, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64,
	0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a,
	0x57, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x25, 0x0a, 0x05, 0x6d, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x05, 0x6d, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x47, 0x69, 0x72, 0x69, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x73, 0x75, 0x6d, 0x6f,
	0x47, 0x69, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69,
	0x22, 0xf9, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x6c, 0x0a, 0x17, 0x54, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x54, 0x65,
	0x6e, 0x70, 0x61, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x65, 0x6e,
	0x70, 0x61, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x54, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x1a, 0x63, 0x0a, 0x1c, 0x54, 0x69, 0x6c, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0c,
	0x54, 0x65, 0x6e, 0x70, 0x61, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x70, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x6e, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x69, 0x6d, 0x61, 0x6e, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x61, 0x6e, 0x62, 0x61, 0x69,
	0x6d, 0x61, 0x6e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x59, 0x61,
	0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x10, 0x05, 0x2a, 0xa8, 0x01, 0x0a, 0x0f, 0x52, 0x79, 0x75, 0x75,
	0x4b, 0x79, 0x6f, 0x4b, 0x75, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x79, 0x75, 0x75, 0x4b, 0x79, 0x6f, 0x6b, 0x75, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x79, 0x75, 0x75, 0x4b, 0x79, 0x6f, 0x6b, 0x75, 0x4b, 0x79, 0x75,
	0x75, 0x53, 0x68, 0x75, 0x4b, 0x79, 0x75, 0x75, 0x48, 0x61, 0x69, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x79, 0x75, 0x75, 0x4b, 0x79, 0x6f, 0x6b, 0x75, 0x53, 0x75, 0x75, 0x43, 0x68, 0x61,
	0x52, 0x69, 0x69, 0x63, 0x68, 0x69, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x79, 0x75, 0x75,
	0x4b, 0x79, 0x6f, 0x6b, 0x75, 0x53, 0x75, 0x75, 0x4b, 0x61, 0x69, 0x4b, 0x61, 0x6e, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x79, 0x75, 0x75, 0x4b, 0x79, 0x6f, 0x6b, 0x75, 0x53, 0x75, 0x75,
	0x66, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x64, 0x61, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x79,
	0x75, 0x75, 0x4b, 0x79, 0x6f, 0x6b, 0x75, 0x53, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x48, 0x6f, 0x75,
	0x10, 0x05, 0x2a, 0x57, 0x0a, 0x0d, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x4a,
	0x75, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x75, 0x72, 0x69,
	0x74, 0x65, 0x6e, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69, 0x10, 0x03, 0x2a, 0x3f, 0x0a, 0x04, 0x57,
	0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x64, 0x44, 0x75, 0x6d, 0x6d, 0x79,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x6f, 0x75, 0x74, 0x68, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x65, 0x73, 0x74, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x10, 0x04, 0x2a, 0xe7, 0x02, 0x0a,
	0x09, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x69,
	0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x61, 0x73, 0x74, 0x31,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x61, 0x73, 0x74, 0x32, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x45, 0x61, 0x73, 0x74, 0x33, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x69,
	0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x61, 0x73, 0x74, 0x34, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x74, 0x68,
	0x31, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x6f, 0x75, 0x74, 0x68, 0x32, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x64,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x33, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x34,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57,
	0x65, 0x73, 0x74, 0x31, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x57, 0x65, 0x73, 0x74, 0x32, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x69,
	0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x65, 0x73, 0x74, 0x33, 0x10, 0x0b, 0x12, 0x12,
	0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x65, 0x73, 0x74, 0x34,
	0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x72, 0x74, 0x68, 0x31, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x64, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x32, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f,
	0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x33, 0x10,
	0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f,
	0x72, 0x74, 0x68, 0x34, 0x10, 0x10, 0x2a, 0xa6, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6b, 0x69, 0x70, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x68,
	0x69, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x61, 0x69, 0x4d, 0x69, 0x6e, 0x4b, 0x61, 0x6e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x68, 0x6f, 0x75, 0x4d, 0x69, 0x6e, 0x4b, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x6e, 0x4b, 0x61, 0x6e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x69, 0x69, 0x63, 0x68, 0x69,
	0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x73, 0x75, 0x6d, 0x6f, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x79, 0x75, 0x53, 0x68, 0x75,
	0x4b, 0x79, 0x75, 0x48, 0x61, 0x69, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e,
	0x4b, 0x61, 0x6e, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x65, 0x78, 0x74, 0x10, 0x0c, 0x2a,
	0x8d, 0x01, 0x0a, 0x02, 0x46, 0x75, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x75, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x75, 0x42, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x75, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x6f,
	0x6e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x75, 0x42, 0x61, 0x73, 0x65, 0x37, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x75, 0x53, 0x65, 0x74, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x75, 0x54, 0x73, 0x75, 0x6d, 0x6f, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x75, 0x4d, 0x65,
	0x6c, 0x64, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x75, 0x4e, 0x6f, 0x4f, 0x70, 0x65, 0x6e,
	0x46, 0x75, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x75, 0x42, 0x61, 0x64, 0x57, 0x61, 0x69,
	0x74, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x75, 0x50, 0x61, 0x69, 0x72, 0x10, 0x09, 0x2a,
	0xa4, 0x06, 0x0a, 0x04, 0x59, 0x61, 0x6b, 0x75, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x61, 0x6b, 0x75,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x59, 0x61, 0x6b, 0x75, 0x52, 0x69,
	0x69, 0x63, 0x68, 0x69, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x59, 0x61, 0x6b, 0x75, 0x44, 0x61,
	0x62, 0x75, 0x72, 0x69, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x49, 0x70,
	0x70, 0x61, 0x74, 0x73, 0x75, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x61, 0x6b, 0x75, 0x54,
	0x73, 0x75, 0x6d, 0x6f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x59, 0x61, 0x6b, 0x75, 0x54, 0x61,
	0x6e, 0x79, 0x61, 0x6f, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x59, 0x61, 0x6b, 0x75, 0x43, 0x68,
	0x61, 0x6e, 0x74, 0x61, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x4a, 0x75,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x75, 0x48,
	0x6f, 0x6e, 0x72, 0x6f, 0x75, 0x74, 0x6f, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b,
	0x75, 0x59, 0x61, 0x6b, 0x75, 0x68, 0x61, 0x69, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x61,
	0x6b, 0x75, 0x48, 0x61, 0x6b, 0x75, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x61, 0x6b, 0x75,
	0x48, 0x61, 0x74, 0x73, 0x75, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x61, 0x6b, 0x75, 0x43,
	0x68, 0x75, 0x6e, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x75, 0x57, 0x69, 0x6e,
	0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x75,
	0x57, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x61,
	0x6b, 0x75, 0x54, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x61, 0x6b, 0x75, 0x4e,
	0x61, 0x6e, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x61, 0x6b, 0x75, 0x53, 0x6a, 0x61, 0x10,
	0x11, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x61, 0x6b, 0x75, 0x50, 0x65, 0x69, 0x10, 0x12, 0x12, 0x0f,
	0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x54, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x13, 0x12,
	0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x4e, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x14,
	0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x53, 0x6a, 0x61, 0x53, 0x65, 0x6c, 0x66, 0x10,
	0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x50, 0x65, 0x69, 0x53, 0x65, 0x6c, 0x66,
	0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x75, 0x54, 0x6f, 0x6e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x75, 0x4e, 0x61, 0x6e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x75, 0x53, 0x6a,
	0x61, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x75,
	0x50, 0x65, 0x69, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61,
	0x6b, 0x75, 0x43, 0x68, 0x69, 0x69, 0x74, 0x6f, 0x69, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x59,
	0x61, 0x6b, 0x75, 0x54, 0x6f, 0x69, 0x74, 0x6f, 0x69, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c, 0x59,
	0x61, 0x6b, 0x75, 0x53, 0x61, 0x6e, 0x61, 0x6e, 0x6b, 0x6f, 0x75, 0x10, 0x1d, 0x12, 0x11, 0x0a,
	0x0d, 0x59, 0x61, 0x6b, 0x75, 0x53, 0x61, 0x6e, 0x6b, 0x61, 0x6e, 0x74, 0x73, 0x75, 0x10, 0x1e,
	0x12, 0x10, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x75, 0x53, 0x61, 0x6e, 0x73, 0x68, 0x6f, 0x6b, 0x75,
	0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x75, 0x53, 0x68, 0x6f, 0x75, 0x73, 0x61,
	0x6e, 0x67, 0x65, 0x6e, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x61, 0x6b, 0x75, 0x50, 0x69,
	0x6e, 0x66, 0x75, 0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x49, 0x70, 0x70,
	0x65, 0x69, 0x6b, 0x6f, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x75, 0x52, 0x79,
	0x61, 0x6e, 0x70, 0x65, 0x69, 0x6b, 0x6f, 0x75, 0x10, 0x23, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x61,
	0x6b, 0x75, 0x49, 0x74, 0x73, 0x75, 0x75, 0x10, 0x24, 0x12, 0x16, 0x0a, 0x12, 0x59, 0x61, 0x6b,
	0x75, 0x53, 0x61, 0x6e, 0x73, 0x68, 0x6f, 0x6b, 0x75, 0x44, 0x6f, 0x75, 0x6b, 0x6f, 0x75, 0x10,
	0x25, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x48, 0x6f, 0x6e, 0x69, 0x74, 0x73, 0x75,
	0x10, 0x26, 0x12, 0x10, 0x0a, 0x0c, 0x59, 0x61, 0x6b, 0x75, 0x43, 0x68, 0x69, 0x6e, 0x69, 0x74,
	0x73, 0x75, 0x10, 0x27, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x61, 0x6b, 0x75, 0x44, 0x6f, 0x72, 0x61,
	0x10, 0x28, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x55, 0x72, 0x61, 0x44, 0x6f, 0x72,
	0x61, 0x10, 0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x41, 0x6b, 0x61, 0x44, 0x6f,
	0x72, 0x61, 0x10, 0x2a, 0x12, 0x0e, 0x0a, 0x0a, 0x59, 0x61, 0x6b, 0x75, 0x52, 0x65, 0x6e, 0x68,
	0x6f, 0x75, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a, 0x59, 0x61, 0x6b, 0x75, 0x48, 0x61, 0x69, 0x74,
	0x65, 0x69, 0x10, 0x2c, 0x12, 0x0e, 0x0a, 0x0a, 0x59, 0x61, 0x6b, 0x75, 0x48, 0x6f, 0x75, 0x74,
	0x65, 0x69, 0x10, 0x2d, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x52, 0x69, 0x6e, 0x73,
	0x68, 0x61, 0x6e, 0x10, 0x2e, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x43, 0x68, 0x61,
	0x6e, 0x6b, 0x61, 0x6e, 0x10, 0x2f, 0x2a, 0xf9, 0x02, 0x0a, 0x07, 0x59, 0x61, 0x6b, 0x75, 0x6d,
	0x61, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x4b, 0x6f,
	0x6b, 0x75, 0x73, 0x68, 0x69, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x61, 0x6b, 0x75, 0x6d,
	0x61, 0x6e, 0x4b, 0x6f, 0x6b, 0x75, 0x73, 0x68, 0x69, 0x31, 0x33, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x53, 0x75, 0x75, 0x6b, 0x61, 0x6e, 0x74, 0x73,
	0x75, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x53, 0x75,
	0x75, 0x61, 0x6e, 0x6b, 0x6f, 0x75, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x75,
	0x6d, 0x61, 0x6e, 0x53, 0x75, 0x75, 0x61, 0x6e, 0x6b, 0x6f, 0x75, 0x54, 0x61, 0x6e, 0x6b, 0x69,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x44, 0x61, 0x69,
	0x73, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x61, 0x6b, 0x75,
	0x6d, 0x61, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x73, 0x75, 0x75, 0x73, 0x68, 0x69, 0x10, 0x07, 0x12,
	0x14, 0x0a, 0x10, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x44, 0x61, 0x69, 0x73, 0x75, 0x75,
	0x73, 0x68, 0x69, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e,
	0x52, 0x79, 0x75, 0x75, 0x69, 0x69, 0x73, 0x6f, 0x75, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x59,
	0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x54, 0x73, 0x75, 0x69, 0x69, 0x73, 0x6f, 0x75, 0x10, 0x0a,
	0x12, 0x14, 0x0a, 0x10, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x43, 0x68, 0x69, 0x6e, 0x72,
	0x6f, 0x75, 0x74, 0x6f, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61,
	0x6e, 0x43, 0x68, 0x75, 0x75, 0x72, 0x65, 0x6e, 0x70, 0x6f, 0x6f, 0x74, 0x6f, 0x10, 0x0c, 0x12,
	0x18, 0x0a, 0x14, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x43, 0x68, 0x75, 0x75, 0x72, 0x65,
	0x6e, 0x70, 0x6f, 0x6f, 0x74, 0x6f, 0x39, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x61, 0x6b,
	0x75, 0x6d, 0x61, 0x6e, 0x54, 0x65, 0x6e, 0x68, 0x6f, 0x75, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d,
	0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x43, 0x68, 0x69, 0x68, 0x6f, 0x75, 0x10, 0x0f, 0x12,
	0x11, 0x0a, 0x0d, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x68, 0x6f, 0x75,
	0x10, 0x10, 0x2a, 0xda, 0x0c, 0x0a, 0x04, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x69, 0x6c, 0x65, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x6e, 0x31, 0x54, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x31, 0x54, 0x32,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x31, 0x54, 0x33, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x31, 0x54, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x6e, 0x32, 0x54, 0x31, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x32, 0x54, 0x32,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x32, 0x54, 0x33, 0x10, 0x07, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x32, 0x54, 0x34, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x6e, 0x33, 0x54, 0x31, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x33, 0x54, 0x32,
	0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x33, 0x54, 0x33, 0x10, 0x0b, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x33, 0x54, 0x34, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x6e, 0x34, 0x54, 0x31, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x34, 0x54, 0x32,
	0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x34, 0x54, 0x33, 0x10, 0x0f, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x34, 0x54, 0x34, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x6e, 0x35, 0x54, 0x31, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x35, 0x54, 0x32,
	0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x35, 0x54, 0x33, 0x10, 0x13, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x35, 0x54, 0x34, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x6e, 0x36, 0x54, 0x31, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x36, 0x54, 0x32,
	0x10, 0x16, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x36, 0x54, 0x33, 0x10, 0x17, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x36, 0x54, 0x34, 0x10, 0x18, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x6e, 0x37, 0x54, 0x31, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x37, 0x54, 0x32,
	0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x37, 0x54, 0x33, 0x10, 0x1b, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x37, 0x54, 0x34, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x6e, 0x38, 0x54, 0x31, 0x10, 0x1d, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x38, 0x54, 0x32,
	0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x38, 0x54, 0x33, 0x10, 0x1f, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x38, 0x54, 0x34, 0x10, 0x20, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x6e, 0x39, 0x54, 0x31, 0x10, 0x21, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x39, 0x54, 0x32,
	0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x39, 0x54, 0x33, 0x10, 0x23, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x39, 0x54, 0x34, 0x10, 0x24, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x31, 0x54, 0x31, 0x10, 0x25, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x31, 0x54, 0x32,
	0x10, 0x26, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x31, 0x54, 0x33, 0x10, 0x27, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x69, 0x6e, 0x31, 0x54, 0x34, 0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x32, 0x54, 0x31, 0x10, 0x29, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x32, 0x54, 0x32,
	0x10, 0x2a, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x32, 0x54, 0x33, 0x10, 0x2b, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x69, 0x6e, 0x32, 0x54, 0x34, 0x10, 0x2c, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x33, 0x54, 0x31, 0x10, 0x2d, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x33, 0x54, 0x32,
	0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x33, 0x54, 0x33, 0x10, 0x2f, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x69, 0x6e, 0x33, 0x54, 0x34, 0x10, 0x30, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x34, 0x54, 0x31, 0x10, 0x31, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x34, 0x54, 0x32,
	0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x34, 0x54, 0x33, 0x10, 0x33, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x69, 0x6e, 0x34, 0x54, 0x34, 0x10, 0x34, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x35, 0x54, 0x31, 0x10, 0x35, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x35, 0x54, 0x32,
	0x10, 0x36, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x35, 0x54, 0x33, 0x10, 0x37, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x69, 0x6e, 0x35, 0x54, 0x34, 0x10, 0x38, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x36, 0x54, 0x31, 0x10, 0x39, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x36, 0x54, 0x32,
	0x10, 0x3a, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x36, 0x54, 0x33, 0x10, 0x3b, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x69, 0x6e, 0x36, 0x54, 0x34, 0x10, 0x3c, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x37, 0x54, 0x31, 0x10, 0x3d, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x37, 0x54, 0x32,
	0x10, 0x3e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x37, 0x54, 0x33, 0x10, 0x3f, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x69, 0x6e, 0x37, 0x54, 0x34, 0x10, 0x40, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x38, 0x54, 0x31, 0x10, 0x41, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x38, 0x54, 0x32,
	0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x38, 0x54, 0x33, 0x10, 0x43, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x69, 0x6e, 0x38, 0x54, 0x34, 0x10, 0x44, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x39, 0x54, 0x31, 0x10, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x39, 0x54, 0x32,
	0x10, 0x46, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x39, 0x54, 0x33, 0x10, 0x47, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x69, 0x6e, 0x39, 0x54, 0x34, 0x10, 0x48, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x31, 0x54, 0x31, 0x10, 0x49, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x31, 0x54, 0x32,
	0x10, 0x4a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x31, 0x54, 0x33, 0x10, 0x4b, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x31, 0x54, 0x34, 0x10, 0x4c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x32, 0x54, 0x31, 0x10, 0x4d, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x32, 0x54, 0x32,
	0x10, 0x4e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x32, 0x54, 0x33, 0x10, 0x4f, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x32, 0x54, 0x34, 0x10, 0x50, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x33, 0x54, 0x31, 0x10, 0x51, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x33, 0x54, 0x32,
	0x10, 0x52, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x33, 0x54, 0x33, 0x10, 0x53, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x33, 0x54, 0x34, 0x10, 0x54, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x34, 0x54, 0x31, 0x10, 0x55, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x34, 0x54, 0x32,
	0x10, 0x56, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x34, 0x54, 0x33, 0x10, 0x57, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x34, 0x54, 0x34, 0x10, 0x58, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x35, 0x54, 0x31, 0x10, 0x59, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x35, 0x54, 0x32,
	0x10, 0x5a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x35, 0x54, 0x33, 0x10, 0x5b, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x35, 0x54, 0x34, 0x10, 0x5c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x36, 0x54, 0x31, 0x10, 0x5d, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x36, 0x54, 0x32,
	0x10, 0x5e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x36, 0x54, 0x33, 0x10, 0x5f, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x36, 0x54, 0x34, 0x10, 0x60, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x37, 0x54, 0x31, 0x10, 0x61, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x37, 0x54, 0x32,
	0x10, 0x62, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x37, 0x54, 0x33, 0x10, 0x63, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x37, 0x54, 0x34, 0x10, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x38, 0x54, 0x31, 0x10, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x38, 0x54, 0x32,
	0x10, 0x66, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x38, 0x54, 0x33, 0x10, 0x67, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x38, 0x54, 0x34, 0x10, 0x68, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x39, 0x54, 0x31, 0x10, 0x69, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x39, 0x54, 0x32,
	0x10, 0x6a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x39, 0x54, 0x33, 0x10, 0x6b, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x39, 0x54, 0x34, 0x10, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x6f,
	0x6e, 0x31, 0x10, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x6f, 0x6e, 0x32, 0x10, 0x6e, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x6f, 0x6e, 0x33, 0x10, 0x6f, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x6f, 0x6e, 0x34,
	0x10, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x61, 0x6e, 0x31, 0x10, 0x71, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x61, 0x6e, 0x32, 0x10, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x61, 0x6e, 0x33, 0x10, 0x73,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x61, 0x6e, 0x34, 0x10, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x68,
	0x61, 0x61, 0x31, 0x10, 0x75, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x61, 0x32, 0x10, 0x76,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x61, 0x33, 0x10, 0x77, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x68, 0x61, 0x61, 0x34, 0x10, 0x78, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x65, 0x69, 0x31, 0x10, 0x79,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x65, 0x69, 0x32, 0x10, 0x7a, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x65,
	0x69, 0x33, 0x10, 0x7b, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x65, 0x69, 0x34, 0x10, 0x7c, 0x12, 0x09,
	0x0a, 0x05, 0x48, 0x61, 0x6b, 0x75, 0x31, 0x10, 0x7d, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x61, 0x6b,
	0x75, 0x32, 0x10, 0x7e, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x61, 0x6b, 0x75, 0x33, 0x10, 0x7f, 0x12,
	0x0a, 0x0a, 0x05, 0x48, 0x61, 0x6b, 0x75, 0x34, 0x10, 0x80, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x48,
	0x61, 0x74, 0x73, 0x75, 0x31, 0x10, 0x81, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x48, 0x61, 0x74, 0x73,
	0x75, 0x32, 0x10, 0x82, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x48, 0x61, 0x74, 0x73, 0x75, 0x33, 0x10,
	0x83, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x48, 0x61, 0x74, 0x73, 0x75, 0x34, 0x10, 0x84, 0x01, 0x12,
	0x0a, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x31, 0x10, 0x85, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x43,
	0x68, 0x75, 0x6e, 0x32, 0x10, 0x86, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x33,
	0x10, 0x87, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x34, 0x10, 0x88, 0x01, 0x2a,
	0x98, 0x03, 0x0a, 0x09, 0x54, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6e, 0x31, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x61, 0x6e, 0x32, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6e, 0x33, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6e, 0x34, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6e,
	0x35, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6e, 0x36, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x61, 0x6e, 0x37, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6e, 0x38, 0x10,
	0x08, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6e, 0x39, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x31, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x32, 0x10, 0x0b, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x33, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e,
	0x34, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x35, 0x10, 0x0e, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x36, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x37, 0x10,
	0x10, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x38, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x39, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x75, 0x31, 0x10, 0x13, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x6f, 0x75, 0x32, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x75,
	0x33, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x75, 0x34, 0x10, 0x16, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x6f, 0x75, 0x35, 0x10, 0x17, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x75, 0x36, 0x10,
	0x18, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x75, 0x37, 0x10, 0x19, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x6f, 0x75, 0x38, 0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x75, 0x39, 0x10, 0x1b, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x6f, 0x6e, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x61, 0x6e, 0x10,
	0x1d, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x68, 0x61, 0x61, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x65, 0x69, 0x10, 0x1f, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x61, 0x6b, 0x75, 0x10, 0x20, 0x12, 0x09,
	0x0a, 0x05, 0x48, 0x61, 0x74, 0x73, 0x75, 0x10, 0x21, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x68, 0x75,
	0x6e, 0x10, 0x22, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x35, 0x10, 0x23,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x35, 0x10, 0x24, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x35, 0x10, 0x25, 0x32, 0xfc, 0x01, 0x0a, 0x09, 0x47,
	0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x4e, 0x0a, 0x0c, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x18, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4a, 0x53, 0x4f,
	0x4e, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x0c, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0xaa, 0x02, 0x0a, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_api_v1_robot_robot_proto_rawDescOnce sync.Once
	file_app_api_v1_robot_robot_proto_rawDescData = file_app_api_v1_robot_robot_proto_rawDesc
)

func file_app_api_v1_robot_robot_proto_rawDescGZIP() []byte {
	file_app_api_v1_robot_robot_proto_rawDescOnce.Do(func() {
		file_app_api_v1_robot_robot_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_api_v1_robot_robot_proto_rawDescData)
	})
	return file_app_api_v1_robot_robot_proto_rawDescData
}

var file_app_api_v1_robot_robot_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_app_api_v1_robot_robot_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_app_api_v1_robot_robot_proto_goTypes = []interface{}{
	(Limit)(0),                  // 0: grpcRobot.Limit
	(RyuuKyoKuReason)(0),        // 1: grpcRobot.RyuuKyoKuReason
	(FuritenReason)(0),          // 2: grpcRobot.FuritenReason
	(Wind)(0),                   // 3: grpcRobot.Wind
	(WindRound)(0),              // 4: grpcRobot.WindRound
	(CallType)(0),               // 5: grpcRobot.CallType
	(Fu)(0),                     // 6: grpcRobot.Fu
	(Yaku)(0),                   // 7: grpcRobot.Yaku
	(Yakuman)(0),                // 8: grpcRobot.Yakuman
	(Tile)(0),                   // 9: grpcRobot.Tile
	(TileClass)(0),              // 10: grpcRobot.TileClass
	(*ChooseActionRequest)(nil), // 11: grpcRobot.ChooseActionRequest
	(*ChooseActionReply)(nil),   // 12: grpcRobot.ChooseActionReply
	(*JsonMessage)(nil),         // 13: grpcRobot.JsonMessage
	(*Call)(nil),                // 14: grpcRobot.Call
	(*Events)(nil),              // 15: grpcRobot.Events
	(*Event)(nil),               // 16: grpcRobot.Event
	(*EventStart)(nil),          // 17: grpcRobot.EventStart
	(*EventEnd)(nil),            // 18: grpcRobot.EventEnd
	(*EventGet)(nil),            // 19: grpcRobot.EventGet
	(*EventDiscard)(nil),        // 20: grpcRobot.EventDiscard
	(*EventCall)(nil),           // 21: grpcRobot.EventCall
	(*EventRiichi)(nil),         // 22: grpcRobot.EventRiichi
	(*EventNewIndicator)(nil),   // 23: grpcRobot.EventNewIndicator
	(*EventRon)(nil),            // 24: grpcRobot.EventRon
	(*EventTsumo)(nil),          // 25: grpcRobot.EventTsumo
	(*EventRyuuKyoKu)(nil),      // 26: grpcRobot.EventRyuuKyoKu
	(*EventFuriten)(nil),        // 27: grpcRobot.EventFuriten
	(*EventNagashiMangan)(nil),  // 28: grpcRobot.EventNagashiMangan
	(*EventTenpaiEnd)(nil),      // 29: grpcRobot.EventTenpaiEnd
	(*Result)(nil),              // 30: grpcRobot.Result
	(*Rule)(nil),                // 31: grpcRobot.Rule
	(*ChatRequest)(nil),         // 32: grpcRobot.ChatRequest
	(*ChatReply)(nil),           // 33: grpcRobot.ChatReply
	(*ScoreResult)(nil),         // 34: grpcRobot.ScoreResult
	(*YakuResult)(nil),          // 35: grpcRobot.YakuResult
	(*YakuSet)(nil),             // 36: grpcRobot.YakuSet
	(*FuInfo)(nil),              // 37: grpcRobot.FuInfo
	(*BoardState)(nil),          // 38: grpcRobot.BoardState
	(*PlayerState)(nil),         // 39: grpcRobot.PlayerState
	(*TenpaiInfo)(nil),          // 40: grpcRobot.TenpaiInfo
	(*TenpaiResult)(nil),        // 41: grpcRobot.TenpaiResult
	nil,                         // 42: grpcRobot.EventStart.PlayersPointsEntry
	nil,                         // 43: grpcRobot.EventGet.TenpaiInfosEntry
	nil,                         // 44: grpcRobot.EventCall.TenpaiInfosEntry
	nil,                         // 45: grpcRobot.BoardState.PlayerStatesEntry
	nil,                         // 46: grpcRobot.TenpaiInfo.TileClassesTenpaiResultEntry
}
var file_app_api_v1_robot_robot_proto_depIdxs = []int32{
	16, // 0: grpcRobot.ChooseActionRequest.events:type_name -> grpcRobot.Event
	14, // 1: grpcRobot.ChooseActionRequest.validActions:type_name -> grpcRobot.Call
	5,  // 2: grpcRobot.Call.type:type_name -> grpcRobot.CallType
	9,  // 3: grpcRobot.Call.tiles:type_name -> grpcRobot.Tile
	3,  // 4: grpcRobot.Call.fromWho:type_name -> grpcRobot.Wind
	16, // 5: grpcRobot.Events.events:type_name -> grpcRobot.Event
	17, // 6: grpcRobot.Event.eventStart:type_name -> grpcRobot.EventStart
	18, // 7: grpcRobot.Event.eventEnd:type_name -> grpcRobot.EventEnd
	19, // 8: grpcRobot.Event.eventGet:type_name -> grpcRobot.EventGet
	20, // 9: grpcRobot.Event.eventDiscard:type_name -> grpcRobot.EventDiscard
	21, // 10: grpcRobot.Event.eventCall:type_name -> grpcRobot.EventCall
	22, // 11: grpcRobot.Event.eventRiichi:type_name -> grpcRobot.EventRiichi
	23, // 12: grpcRobot.Event.eventNewIndicator:type_name -> grpcRobot.EventNewIndicator
	24, // 13: grpcRobot.Event.eventRon:type_name -> grpcRobot.EventRon
	25, // 14: grpcRobot.Event.eventTsumo:type_name -> grpcRobot.EventTsumo
	26, // 15: grpcRobot.Event.eventRyuuKyoKu:type_name -> grpcRobot.EventRyuuKyoKu
	27, // 16: grpcRobot.Event.eventFuriten:type_name -> grpcRobot.EventFuriten
	28, // 17: grpcRobot.Event.eventNagashiMangan:type_name -> grpcRobot.EventNagashiMangan
	29, // 18: grpcRobot.Event.eventTenpaiEnd:type_name -> grpcRobot.EventTenpaiEnd
	4,  // 19: grpcRobot.EventStart.windRound:type_name -> grpcRobot.WindRound
	3,  // 20: grpcRobot.EventStart.initWind:type_name -> grpcRobot.Wind
	9,  // 21: grpcRobot.EventStart.initDoraIndicator:type_name -> grpcRobot.Tile
	9,  // 22: grpcRobot.EventStart.initTiles:type_name -> grpcRobot.Tile
	31, // 23: grpcRobot.EventStart.gameRule:type_name -> grpcRobot.Rule
	42, // 24: grpcRobot.EventStart.playersPoints:type_name -> grpcRobot.EventStart.PlayersPointsEntry
	3,  // 25: grpcRobot.EventGet.who:type_name -> grpcRobot.Wind
	9,  // 26: grpcRobot.EventGet.tile:type_name -> grpcRobot.Tile
	43, // 27: grpcRobot.EventGet.tenpaiInfos:type_name -> grpcRobot.EventGet.TenpaiInfosEntry
	3,  // 28: grpcRobot.EventDiscard.who:type_name -> grpcRobot.Wind
	9,  // 29: grpcRobot.EventDiscard.tile:type_name -> grpcRobot.Tile
	40, // 30: grpcRobot.EventDiscard.tenpaiInfo:type_name -> grpcRobot.TenpaiInfo
	3,  // 31: grpcRobot.EventCall.who:type_name -> grpcRobot.Wind
	14, // 32: grpcRobot.EventCall.call:type_name -> grpcRobot.Call
	44, // 33: grpcRobot.EventCall.tenpaiInfos:type_name -> grpcRobot.EventCall.TenpaiInfosEntry
	3,  // 34: grpcRobot.EventRiichi.who:type_name -> grpcRobot.Wind
	9,  // 35: grpcRobot.EventNewIndicator.tile:type_name -> grpcRobot.Tile
	3,  // 36: grpcRobot.EventRon.who:type_name -> grpcRobot.Wind
	3,  // 37: grpcRobot.EventRon.fromWho:type_name -> grpcRobot.Wind
	9,  // 38: grpcRobot.EventRon.handTiles:type_name -> grpcRobot.Tile
	9,  // 39: grpcRobot.EventRon.winTile:type_name -> grpcRobot.Tile
	30, // 40: grpcRobot.EventRon.result:type_name -> grpcRobot.Result
	3,  // 41: grpcRobot.EventTsumo.who:type_name -> grpcRobot.Wind
	9,  // 42: grpcRobot.EventTsumo.handTiles:type_name -> grpcRobot.Tile
	9,  // 43: grpcRobot.EventTsumo.winTile:type_name -> grpcRobot.Tile
	30, // 44: grpcRobot.EventTsumo.result:type_name -> grpcRobot.Result
	3,  // 45: grpcRobot.EventRyuuKyoKu.who:type_name -> grpcRobot.Wind
	9,  // 46: grpcRobot.EventRyuuKyoKu.handTiles:type_name -> grpcRobot.Tile
	1,  // 47: grpcRobot.EventRyuuKyoKu.reason:type_name -> grpcRobot.RyuuKyoKuReason
	3,  // 48: grpcRobot.EventFuriten.who:type_name -> grpcRobot.Wind
	2,  // 49: grpcRobot.EventFuriten.reason:type_name -> grpcRobot.FuritenReason
	3,  // 50: grpcRobot.EventNagashiMangan.who:type_name -> grpcRobot.Wind
	3,  // 51: grpcRobot.EventTenpaiEnd.who:type_name -> grpcRobot.Wind
	9,  // 52: grpcRobot.EventTenpaiEnd.handTiles:type_name -> grpcRobot.Tile
	10, // 53: grpcRobot.EventTenpaiEnd.tenpaiSlice:type_name -> grpcRobot.TileClass
	35, // 54: grpcRobot.Result.yakuResult:type_name -> grpcRobot.YakuResult
	34, // 55: grpcRobot.Result.scoreResult:type_name -> grpcRobot.ScoreResult
	0,  // 56: grpcRobot.Rule.renhouLimit:type_name -> grpcRobot.Limit
	0,  // 57: grpcRobot.ScoreResult.special:type_name -> grpcRobot.Limit
	36, // 58: grpcRobot.YakuResult.yakuSets:type_name -> grpcRobot.YakuSet
	8,  // 59: grpcRobot.YakuResult.yakumans:type_name -> grpcRobot.Yakuman
	36, // 60: grpcRobot.YakuResult.bonuses:type_name -> grpcRobot.YakuSet
	37, // 61: grpcRobot.YakuResult.fus:type_name -> grpcRobot.FuInfo
	7,  // 62: grpcRobot.YakuSet.yaku:type_name -> grpcRobot.Yaku
	6,  // 63: grpcRobot.FuInfo.fu:type_name -> grpcRobot.Fu
	4,  // 64: grpcRobot.BoardState.windRound:type_name -> grpcRobot.WindRound
	9,  // 65: grpcRobot.BoardState.doraIndicators:type_name -> grpcRobot.Tile
	3,  // 66: grpcRobot.BoardState.playerWind:type_name -> grpcRobot.Wind
	3,  // 67: grpcRobot.BoardState.position:type_name -> grpcRobot.Wind
	9,  // 68: grpcRobot.BoardState.handTiles:type_name -> grpcRobot.Tile
	14, // 69: grpcRobot.BoardState.ValidActions:type_name -> grpcRobot.Call
	45, // 70: grpcRobot.BoardState.playerStates:type_name -> grpcRobot.BoardState.PlayerStatesEntry
	14, // 71: grpcRobot.PlayerState.melds:type_name -> grpcRobot.Call
	9,  // 72: grpcRobot.PlayerState.discardTiles:type_name -> grpcRobot.Tile
	46, // 73: grpcRobot.TenpaiInfo.TileClassesTenpaiResult:type_name -> grpcRobot.TenpaiInfo.TileClassesTenpaiResultEntry
	30, // 74: grpcRobot.TenpaiResult.Result:type_name -> grpcRobot.Result
	40, // 75: grpcRobot.EventGet.TenpaiInfosEntry.value:type_name -> grpcRobot.TenpaiInfo
	40, // 76: grpcRobot.EventCall.TenpaiInfosEntry.value:type_name -> grpcRobot.TenpaiInfo
	39, // 77: grpcRobot.BoardState.PlayerStatesEntry.value:type_name -> grpcRobot.PlayerState
	41, // 78: grpcRobot.TenpaiInfo.TileClassesTenpaiResultEntry.value:type_name -> grpcRobot.TenpaiResult
	11, // 79: grpcRobot.GrpcRobot.ChooseAction:input_type -> grpcRobot.ChooseActionRequest
	38, // 80: grpcRobot.GrpcRobot.ChooseActionByBoardState:input_type -> grpcRobot.BoardState
	13, // 81: grpcRobot.GrpcRobot.ChooseActionByJSON:input_type -> grpcRobot.JsonMessage
	12, // 82: grpcRobot.GrpcRobot.ChooseAction:output_type -> grpcRobot.ChooseActionReply
	12, // 83: grpcRobot.GrpcRobot.ChooseActionByBoardState:output_type -> grpcRobot.ChooseActionReply
	12, // 84: grpcRobot.GrpcRobot.ChooseActionByJSON:output_type -> grpcRobot.ChooseActionReply
	82, // [82:85] is the sub-list for method output_type
	79, // [79:82] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_app_api_v1_robot_robot_proto_init() }
func file_app_api_v1_robot_robot_proto_init() {
	if File_app_api_v1_robot_robot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_api_v1_robot_robot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseActionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDiscard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRiichi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNewIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTsumo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRyuuKyoKu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventFuriten); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNagashiMangan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTenpaiEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakuResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakuSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenpaiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_api_v1_robot_robot_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenpaiResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_app_api_v1_robot_robot_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Event_EventStart)(nil),
		(*Event_EventEnd)(nil),
		(*Event_EventGet)(nil),
		(*Event_EventDiscard)(nil),
		(*Event_EventCall)(nil),
		(*Event_EventRiichi)(nil),
		(*Event_EventNewIndicator)(nil),
		(*Event_EventRon)(nil),
		(*Event_EventTsumo)(nil),
		(*Event_EventRyuuKyoKu)(nil),
		(*Event_EventFuriten)(nil),
		(*Event_EventNagashiMangan)(nil),
		(*Event_EventTenpaiEnd)(nil),
	}
	file_app_api_v1_robot_robot_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_api_v1_robot_robot_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_api_v1_robot_robot_proto_goTypes,
		DependencyIndexes: file_app_api_v1_robot_robot_proto_depIdxs,
		EnumInfos:         file_app_api_v1_robot_robot_proto_enumTypes,
		MessageInfos:      file_app_api_v1_robot_robot_proto_msgTypes,
	}.Build()
	File_app_api_v1_robot_robot_proto = out.File
	file_app_api_v1_robot_robot_proto_rawDesc = nil
	file_app_api_v1_robot_robot_proto_goTypes = nil
	file_app_api_v1_robot_robot_proto_depIdxs = nil
}
